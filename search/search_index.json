{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u5173\u4e8e","text":"<p>\u76f8\u5173\u4ee3\u7801\u89c1Github</p>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/","title":"AXI-Stream\u63a5\u53e3","text":""},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#_1","title":"\u6570\u636e\u5bbd\u5ea6","text":"<p>\u5c3d\u7ba1AXI-Stream\u6807\u51c6\u6ca1\u6709\u89c4\u5b9a<code>tdata</code>\u7684\u5bbd\u5ea6\u5fc5\u987b\u4e3a8\u7684\u500d\u6570\uff0c \u4f46\u662fVivado\u7684ip\u6838\u4e00\u822c\u90fd\u662f\u6309\u5b57\u8282\u5bf9\u9f50\u7684\uff0c \u6240\u4ee5\u8fd8\u662f\u5efa\u8bae\u5c06<code>tdata</code>\u5bbd\u5ea6\u5bf9\u9f50\uff0c \u7279\u522b\u662f\u6709\u591a\u4e2a\u5e76\u884c\u6570\u636e\u7684\u60c5\u51b5\u3002</p> <pre><code>input wire [(DATA_WIDTH)/8*8-1 : 0] s_axis_tdata\n</code></pre> <p>\u4e24\u4e2a\u6570\u636e\u7684\u60c5\u51b5</p> <pre><code>input wire [2*((DATA_WIDTH)/8*8)-1 : 0] s_axis_tdata\n</code></pre>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#_2","title":"\u63e1\u624b\u4e0e\u53cd\u538b","text":"<p>\u5728\u65f6\u949f\u4e0a\u5347\u6cbf\uff0c \u5982\u679c<code>tready</code>\u548c<code>tvalid</code>\u540c\u65f6\u4e3a\u9ad8\u5219\u4e3a\u63e1\u624b\u6210\u529f\uff0c \u6b64\u65f6\u53d1\u751f\u6570\u636e\u4f20\u9012\u3002</p> <p>\u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u5b8c\u6574\u6027\uff0c AXI-Stream\u534f\u8bae\u89c4\u5b9a\u5f53<code>tvalid</code>\u62c9\u9ad8\u540e\uff0c \u5728<code>tready</code>\u62c9\u9ad8\u3001\u63e1\u624b\u7ed3\u675f\u4e4b\u524d\uff0c \u5176\u4ed6\u4fe1\u53f7\u5e94\u5f53\u4fdd\u6301\u4e0d\u53d8\uff0c \u4e14<code>tvalid</code>\u4e0d\u5f97\u81ea\u884c\u62c9\u4f4e\u3002 <code>tready</code>\u53ef\u4ee5\u6839\u636e\u63a5\u6536\u7aef\u72b6\u6001\u968f\u65f6\u62c9\u9ad8\u6216\u62c9\u4f4e\u3002</p> <p>\u6ce8\u610f<code>tvalid</code>\u4e0e<code>tready</code>\u4e0d\u53ef\u8fc7\u5ea6\u4f9d\u8d56\uff0c \u5728AXI-Stream\u534f\u8bae\u4e2d\uff0c <code>tready</code>\u53ef\u4ee5\u7b49\u5f85<code>tvalid</code>\u62c9\u9ad8\u518d\u62c9\u9ad8\uff0c \u4f46<code>tvalid</code>\u4e0d\u53ef\u4f9d\u8d56<code>tready</code>\uff0c \u4ee5\u9632\u6b62\u6b7b\u9501\uff08deadlock\uff09\u3002 \u672c\u6587\u7684\u6837\u4f8b\u4e2d<code>tready</code>\u548c<code>tvalid</code>\u90fd\u662f\u72ec\u7acb\u7684\u3002</p> <p>\u5728\u590d\u4f4d\u72b6\u6001\u4e0b\uff0c \u867d\u7136\u6807\u51c6\u5e76\u6ca1\u6709\u786c\u6027\u89c4\u5b9a<code>tready</code>\u5fc5\u987b\u4e3a\u4f4e\uff0c \u4f46\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c \u8fd8\u662f\u5e94\u8be5\u5c06<code>tready</code>\u5728\u590d\u4f4d\u671f\u95f4\u7f6e\u4f4e\uff0c \u4ee5\u9632\u6b62\u610f\u5916\u63e1\u624b\u3002</p> <p>\u5f53\u540e\u7ea7\u672a\u51c6\u5907\u597d\u65f6\uff0c \u5982\u679c\u672c\u7ea7\u8fdb\u884c\u6570\u636e\u4f20\u9012\uff0c \u90a3\u4e48\u5b83\u5c31\u9700\u8981\u53cd\u538b\u524d\u7ea7\uff0c \u8ba9\u524d\u7ea7\u7684\u6570\u636e\u4e5f\u4fdd\u6301\u4e0d\u52a8\uff0c \u76f4\u5230\u63e1\u624b\u6210\u529f\u624d\u80fd\u66f4\u65b0\u6570\u636e\u3002</p>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#half-buffer","title":"Half-Buffer","text":"<p>\u5f53\u5bc4\u5b58\u5668\u7a7a\u65f6\u53ea\u53ef\u4ee5\u8fdb\u884c\u8f93\u5165\u63e1\u624b\uff0c \u5f53\u5bc4\u5b58\u5668\u6ee1\u65f6\u53ea\u53ef\u4ee5\u8fdb\u884c\u8f93\u51fa\u63e1\u624b\u3002 \u53ea\u80fd\u5b9e\u73b050%\u7684\u541e\u5410\u7387\u3002</p> Example axis_half_buffer.v<pre><code>module axis_half_buffer #(\n    parameter integer DATA_WIDTH = 32\n) (\n    input wire aclk,\n    input wire aresetn,\n\n    input  wire [DATA_WIDTH-1:0] s_axis_tdata,\n    input  wire                  s_axis_tvalid,\n    output wire                  s_axis_tready,\n    input  wire                  s_axis_tlast,\n\n    output wire [DATA_WIDTH-1:0] m_axis_tdata,\n    output wire                  m_axis_tvalid,\n    input  wire                  m_axis_tready,\n    output wire                  m_axis_tlast\n);\n\n    // Process Control Signals\n    reg valid_o;\n\n    assign s_axis_tready = aresetn ? !valid_o : 1'b0;\n\n    assign m_axis_tvalid = valid_o;\n\n    always @(posedge aclk) begin\n        if (!aresetn) begin\n            valid_o &lt;= 0;\n        end else if (s_axis_tvalid &amp;&amp; s_axis_tready) begin\n            valid_o &lt;= 1;\n        end else if (m_axis_tvalid &amp;&amp; m_axis_tready) begin\n            valid_o &lt;= 0;\n        end\n    end\n\n    // Process Data\n    localparam integer TOTAL_WIDTH = DATA_WIDTH + 1;\n\n    wire [TOTAL_WIDTH-1 : 0] data_i;\n    reg [TOTAL_WIDTH-1 : 0] data_o;\n\n    assign data_i = {s_axis_tlast, s_axis_tdata};\n\n    always @(posedge aclk) begin\n        if (s_axis_tvalid &amp;&amp; s_axis_tready) begin\n            data_o &lt;= data_i;\n        end\n    end\n\n    assign {m_axis_tlast, m_axis_tdata} = data_o;\n\nendmodule\n</code></pre>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#pre-fetch","title":"Pre-fetch\u9884\u53d6\u8bbe\u8ba1","text":"<p>\u5f53\u524d\u6570\u636e\u5728\u88ab\u5904\u7406\u7684\u540c\u65f6\uff0c \u5df2\u7ecf\u51c6\u5907\u597d\u63a5\u6536\u4e0b\u4e00\u4e2a\u6570\u636e\uff0c \u4f7f\u5f97\u8f93\u5165\u8f93\u51fa\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\uff0c \u5b9e\u73b0\u7406\u8bba\u4e0a100%\u7684\u541e\u5410\u7387\u3002</p> <p>\u7136\u800c\u5982\u679c\u6ca1\u6709\u989d\u5916\u7684\u5b58\u50a8\u4f53\u7684\u8bdd\uff0c \u5219\u5fc5\u987b\u901a\u8fc7\u7ec4\u5408\u903b\u8f91\u53cd\u538b\u524d\u7ea7\uff0c \u8ba9\u6574\u4e2a\u6d41\u6c34\u7ebf\u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u4e4b\u5185\u505c\u4e0b\u3002 \u5982\u679c\u6d41\u6c34\u7ebf\u8fc7\u957f\u6216\u63a7\u5236\u903b\u8f91\u592a\u590d\u6742\uff0c \u53ef\u80fd\u4f1a\u9020\u6210\u65f6\u5e8f\u95ee\u9898\uff0c \u4e0d\u8fc7\u4e00\u822c\u6765\u8bf4\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\u3002</p> Example axis_prefetch.v<pre><code>module axis_prefetch #(\n    parameter integer DATA_WIDTH = 32\n) (\n    input wire aclk,\n    input wire aresetn,\n\n    input  wire [DATA_WIDTH-1:0] s_axis_tdata,\n    input  wire                  s_axis_tvalid,\n    output wire                  s_axis_tready,\n    input  wire                  s_axis_tlast,\n\n    output wire [DATA_WIDTH-1:0] m_axis_tdata,\n    output wire                  m_axis_tvalid,\n    input  wire                  m_axis_tready,\n    output wire                  m_axis_tlast\n);\n\n    // Process Control Signals\n    reg valid_o;\n\n    assign s_axis_tready = aresetn ? !m_axis_tvalid || m_axis_tready : 1'b0;\n\n    assign m_axis_tvalid = valid_o;\n\n    always @(posedge aclk) begin\n        if (!aresetn) begin\n            valid_o &lt;= 1'b0;\n        end else if (s_axis_tvalid &amp;&amp; s_axis_tready) begin\n            valid_o &lt;= 1'b1;\n        end else if (m_axis_tvalid &amp;&amp; m_axis_tready) begin\n            valid_o &lt;= 0;\n        end\n    end\n\n    // Process Data\n    localparam integer TOTAL_WIDTH = DATA_WIDTH + 1;\n\n    wire [TOTAL_WIDTH-1 : 0] data_i;\n    reg [TOTAL_WIDTH-1 : 0] data_o;\n\n    assign data_i = {s_axis_tlast, s_axis_tdata};\n\n    always @(posedge aclk) begin\n        if (s_axis_tvalid &amp;&amp; s_axis_tready) begin\n            data_o &lt;= data_i;\n        end\n    end\n\n    assign {m_axis_tlast, m_axis_tdata} = data_o;\n\nendmodule\n</code></pre>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#skid-buffer","title":"Skid Buffer","text":"<p>\u5f53\u540e\u7ea7\u65e0\u6cd5\u63a5\u6536\u6570\u636e\u65f6\uff0c \u4f7f\u7528\u4e00\u4e2a\u989d\u5916\u7684\u7f13\u51b2\u533a\u5b58\u50a8\u8f93\u5165\u6570\u636e\uff0c \u76f8\u5f53\u4e8e\u4e00\u4e2a\u6df1\u5ea6\u4e3a2\u7684\u6700\u5c0f\u7684FIFO\u3002 \u8fd9\u6837\u8f93\u51fa\u8f93\u51fa\u95f4\u5c31\u4e0d\u518d\u9700\u8981\u7ec4\u5408\u8def\u5f84\uff0c \u4f46\u662f\u63a7\u5236\u72b6\u6001\u673a\u66f4\u590d\u6742\u4e00\u4e9b\u3002</p> <p>\u76f8\u5173\u6587\u7ae0:</p> <ul> <li> <p>fpgacpu.ca Pipeline Skid-Buffer;</p> </li> <li> <p>zipcpu.com Skid-Buffer</p> </li> </ul> Example axis_skid_buffer.v<pre><code>module axis_skid_buffer #(\n    parameter integer DATA_WIDTH = 32\n) (\n    input wire aclk,\n    input wire aresetn,\n\n    input  wire [DATA_WIDTH-1:0] s_axis_tdata,\n    input  wire                  s_axis_tvalid,\n    output wire                  s_axis_tready,\n    input  wire                  s_axis_tlast,\n\n    output wire [DATA_WIDTH-1:0] m_axis_tdata,\n    output wire                  m_axis_tvalid,\n    input  wire                  m_axis_tready,\n    output wire                  m_axis_tlast\n);\n\n    // Handshake Signals\n    wire s_handshake;\n    wire m_handshake;\n\n    assign s_handshake = s_axis_tvalid &amp;&amp; s_axis_tready;\n    assign m_handshake = m_axis_tvalid &amp;&amp; m_axis_tready;\n\n    // State Machine\n    localparam integer EMPTY = 2'b00;\n    localparam integer ACTIVE = 2'b01;\n    localparam integer FULL = 2'b11;\n\n    reg [1:0] state;\n\n    always @(posedge aclk) begin\n        if (!aresetn) begin\n            state &lt;= EMPTY;\n        end else begin\n            case (state)\n                EMPTY: begin\n                    if (s_handshake) begin\n                        state &lt;= ACTIVE;\n                    end\n                end\n                ACTIVE: begin\n                    if (s_handshake &amp;&amp; !m_handshake) begin\n                        state &lt;= FULL;\n                    end else if (!s_handshake &amp;&amp; m_handshake) begin\n                        state &lt;= EMPTY;\n                    end\n                end\n                FULL: begin\n                    if (m_handshake) begin\n                        state &lt;= ACTIVE;\n                    end\n                end\n                default: begin\n                    state &lt;= EMPTY;\n                end\n            endcase\n        end\n    end\n\n    // Process Control Signals\n    assign s_axis_tready = aresetn ? (state == EMPTY || state == ACTIVE) : 1'b0;\n\n    assign m_axis_tvalid = state == ACTIVE || state == FULL;\n\n    // Process Data\n    localparam integer TOTAL_WIDTH = DATA_WIDTH + 1;  // 1 bit for tlast\n\n    wire [TOTAL_WIDTH-1 : 0] data_i;\n    reg  [  TOTAL_WIDTH-1:0] buffer;\n    reg  [  TOTAL_WIDTH-1:0] data_o;\n\n    assign data_i = {s_axis_tlast, s_axis_tdata};\n\n    always @(posedge aclk) begin\n        case (state)\n            EMPTY: begin\n                if (s_handshake) begin\n                    data_o &lt;= data_i;\n                end\n            end\n            ACTIVE: begin\n                if (s_handshake) begin\n                    if (m_handshake) begin\n                        data_o &lt;= data_i;\n                    end else begin\n                        buffer &lt;= data_i;\n                    end\n                end\n            end\n            FULL: begin\n                if (m_handshake) begin\n                    data_o &lt;= buffer;\n                end\n            end\n            default: begin\n                data_o &lt;= data_o;\n                buffer &lt;= buffer;\n            end\n        endcase\n    end\n\n    assign {m_axis_tlast, m_axis_tdata} = data_o;\n\nendmodule\n</code></pre>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#fifo","title":"\u4f7f\u7528FIFO\u7f13\u51b2","text":"<p>\u5982\u679c\u4e0d\u80fd\u8ba9\u6d41\u6c34\u7ebf\u7684\u6bcf\u4e00\u7ea7\u90fd\u505c\u4e0b\u6765\uff0c \u53ef\u4ee5\u5728\u6d41\u6c34\u7ebf\u540e\u6dfb\u52a0FIFO\uff0c \u5f53\u6d41\u6c34\u7ebf\u548cFIFO\u4e2d\u6570\u636e\u603b\u91cf\u5373\u5c06\u6ea2\u51fa\u65f6\uff0c \u63d0\u524d\u53cd\u538b\u524d\u7ea7\u3002</p> <p>\u793a\u4f8b\u4ee3\u7801\u4f7f\u7528\u4e86Vivado\u7684XPM\u5b9e\u73b0FIFO, \u4f7f\u7528\u72ec\u7acb\u7684\u8ba1\u6570\u5668\u800c\u975eFIFO\u81ea\u5e26\u7684<code>prog_full</code> \u662f\u56e0\u4e3aFIFO\u65e0\u6cd5\u5f97\u77e5\u6d41\u6c34\u7ebf\u5185\u7684\u6570\u636e\u6570\u91cf\uff0c \u53ef\u80fd\u4f1a\u4ea7\u751f\u7a7a\u6ce1\uff0c \u4ece\u800c\u65e0\u6cd5\u8fbe\u5230100%\u7684\u541e\u5410\u7387\u3002</p> Example axis_fifo_pipeline.v<pre><code>module axis_fifo_pipeline #(\n    parameter integer INPUT_WIDTH  = 32,\n    parameter integer OUTPUT_WIDTH = 32,\n    parameter integer FIFO_DEPTH   = 16\n) (\n    input wire aclk,\n    input wire aresetn,\n\n    input  wire [INPUT_WIDTH-1:0] s_axis_tdata,\n    input  wire                   s_axis_tvalid,\n    output wire                   s_axis_tready,\n    input  wire                   s_axis_tlast,\n\n    output wire [OUTPUT_WIDTH-1:0] m_axis_tdata,\n    output wire                    m_axis_tvalid,\n    input  wire                    m_axis_tready,\n    output wire                    m_axis_tlast,\n\n    output wire overflow\n);\n\n    // Handshake Signals\n    wire s_handshake;\n    wire m_handshake;\n\n    assign s_handshake = s_axis_tvalid &amp;&amp; s_axis_tready;\n    assign m_handshake = m_axis_tvalid &amp;&amp; m_axis_tready;\n\n    // Counter\n    localparam integer CounterWidth = $clog2(FIFO_DEPTH + 1);\n\n    reg [CounterWidth-1 : 0] counter;\n\n    always @(posedge aclk) begin\n        if (!aresetn) begin\n            counter &lt;= 0;\n        end else begin\n            if (s_handshake &amp;&amp; !m_handshake) begin\n                counter &lt;= counter + 1;\n            end else if (!s_handshake &amp;&amp; m_handshake) begin\n                counter &lt;= counter - 1;\n            end else begin\n                counter &lt;= counter;\n            end\n        end\n    end\n\n    // Pipeline\n    wire [ INPUT_WIDTH-1 : 0] data_i;\n    wire [OUTPUT_WIDTH-1 : 0] data_o;\n\n    assign data_i = s_axis_tdata;\n\n    wire valid_i;\n    wire last_i;\n    wire valid_o;\n    wire last_o;\n\n    assign valid_i = s_handshake;\n    assign last_i  = s_axis_tlast;\n\n    // FIFO\n    localparam integer TOTAL_WIDTH = OUTPUT_WIDTH + 1;  // 1 bit for last\n\n    // FIFO Data Signals\n    wire [TOTAL_WIDTH-1 : 0] fifo_din;\n    wire [TOTAL_WIDTH-1 : 0] fifo_dout;\n\n    assign fifo_din                     = {last_o, data_o};\n    assign {m_axis_tlast, m_axis_tdata} = fifo_dout;\n\n    // FIFO Control Signals\n    wire fifo_wr_en;\n    wire fifo_rd_en;\n    wire fifo_wr_rst_busy;\n    wire fifo_rd_rst_busy;\n    wire fifo_empty;\n    wire fifo_full;\n    wire fifo_ready;\n\n    assign fifo_ready    = !fifo_wr_rst_busy &amp;&amp; !fifo_rd_rst_busy;\n\n    assign fifo_wr_en    = valid_o;\n    assign fifo_rd_en    = m_handshake;\n\n    assign s_axis_tready = fifo_ready ? (counter &lt; FIFO_DEPTH) : 1'b0;\n    assign m_axis_tvalid = fifo_ready ? !fifo_empty : 1'b0;\n\n    xpm_fifo_sync #(\n        .DOUT_RESET_VALUE(\"0\"),\n        .ECC_MODE(\"no_ecc\"),\n        .FIFO_MEMORY_TYPE(\"auto\"),\n        .READ_MODE(\"fwft\"),\n        .FIFO_READ_LATENCY(1),\n        .FIFO_WRITE_DEPTH(FIFO_DEPTH),\n        .PROG_EMPTY_THRESH(10),\n        .PROG_FULL_THRESH(10),\n        .RD_DATA_COUNT_WIDTH(CounterWidth),\n        .READ_DATA_WIDTH(TOTAL_WIDTH),\n        .WRITE_DATA_WIDTH(TOTAL_WIDTH),\n        .WR_DATA_COUNT_WIDTH(CounterWidth)\n    ) xpm_fifo_sync_inst (\n        .wr_clk(aclk),\n        .rst(~aresetn),\n\n        .din(fifo_din),\n        .wr_en(fifo_wr_en),\n        .full(fifo_full),\n        .prog_full(),\n        .wr_data_count(),\n\n        .dout(fifo_dout),\n        .rd_en(fifo_rd_en),\n        .empty(fifo_empty),\n        .prog_empty(),\n        .rd_data_count(),\n\n        .injectdbiterr(1'b0),\n        .injectsbiterr(1'b0),\n        .dbiterr(),\n        .sbiterr(),\n\n        .wr_rst_busy(fifo_wr_rst_busy),\n        .rd_rst_busy(fifo_rd_rst_busy)\n    );\n\n    // Interrupt Signals\n    assign overflow = fifo_full &amp;&amp; valid_o;\n\n    // Internal Pipeline\n    pipeline #(\n        .INPUT_WIDTH(INPUT_WIDTH),\n        .OUTPUT_WIDTH(OUTPUT_WIDTH)\n    ) pipeline_inst (\n        .aclk(aclk),\n        .aresetn(aresetn),\n\n        .s_axis_tdata (data_i),\n        .s_axis_tvalid(valid_i),\n        .s_axis_tlast (last_i),\n\n        .m_axis_tdata (data_o),\n        .m_axis_tvalid(valid_o),\n        .m_axis_tlast (last_o)\n    );\n\n\nendmodule\n</code></pre>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#_3","title":"\u8de8\u7ea7\u53cd\u538b","text":"<p>\u5982\u679c\u5bf9\u4e8e\u541e\u5410\u7387\u6ca1\u6709\u4e25\u683c\u8981\u6c42\u7684\u8bdd\uff0c \u53ef\u4ee5\u6839\u636eFIFO\u6df1\u5ea6\u548c\u6d41\u6c34\u7ebf\u7ea7\u6570\u8ba1\u7b97\u6c34\u7ebf\uff0c \u914d\u5408<code>prog_full</code>\u548c\u95e8\u63a7\u6a21\u5757\u5b9e\u73b0\u8de8\u7ea7\u53cd\u538b\u3002</p>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#_4","title":"\u63a7\u5236\u548c\u540c\u6b65","text":"<p><code>tlast</code>\u7528\u4e8e\u8868\u793a\u4e00\u5e27\u6570\u636e\u7684\u7ed3\u675f\u3002</p> <p>\u5728\u6d89\u53ca\u5230\u6570\u636e\u540c\u6b65\u7684\u6a21\u5757\uff08\u5982\u8ba1\u6570\u5668\uff09\u4e2d\uff0c \u4e0d\u96be\u60f3\u5230\u5982\u679c\u610f\u5916\u53d1\u751f\u4e86\u6570\u636e\u7684\u4e22\u5931\u6216\u91cd\u590d\uff0c \u5373\u4f7f\u540e\u9762\u7684\u6570\u636e\u662f\u6b63\u786e\u7684\uff0c \u4e5f\u5f88\u6709\u53ef\u80fd\u4e00\u76f4\u9519\u4f4d\u4e0b\u53bb\u3002 \u6240\u4ee5\u5373\u4f7f\u6709\u4e9b\u6a21\u5757(\u5982<code>fft</code>)\u4e0d\u9700\u8981<code>tlast</code>\u4e5f\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c \u8fd8\u662f\u5efa\u8bae\u52a0\u5165\u5bf9<code>tlast</code>\u7684\u68c0\u6d4b\u3002</p>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#_5","title":"\u95e8\u63a7\u7f13\u51b2\u7ea7","text":"<p>\u5982\u679c\u6709\u989d\u5916\u7684\u903b\u8f91\u63a7\u5236\u6d41\u6c34\u7ebf\u7684\u542f\u505c\uff0c \u76f4\u63a5\u5728AXI-Stream\u7684\u63e1\u624b\u4fe1\u53f7\u4e2d\u52a0\u5165\u7ec4\u5408\u903b\u8f91\u5f88\u53ef\u80fd\u4f1a\u4ea7\u751f\u95ee\u9898\uff0c \u5efa\u8bae\u52a0\u5165\u4e00\u7ea7\u95e8\u63a7\u7f13\u51b2\u3002</p> <p>\u7531\u4e8e\u95e8\u63a7\u7ea7\u53ef\u80fd\u9700\u8981\u9891\u7e41\u542f\u505c\uff0c \u4e3a\u4e86\u4fdd\u8bc1\u541e\u5410\u7387\uff0c \u4f7f\u7528ping-pong\u53cc\u7f13\u51b2\u533a\u8bbe\u8ba1\u3002</p> <p>\u6b64\u8bbe\u8ba1\u786e\u4fdd<code>m_axis_tvalid</code>\u53ea\u4f1a\u5728<code>enable</code>\u4e3a\u9ad8\u65f6\u624d\u62c9\u9ad8\u3002</p> Example axis_gating.v<pre><code>module axis_gating #(\n    parameter integer DATA_WIDTH = 32\n) (\n    input wire aclk,\n    input wire aresetn,\n\n    input wire enable,\n\n    input  wire [DATA_WIDTH-1 : 0] s_axis_tdata,\n    input  wire                    s_axis_tvalid,\n    output wire                    s_axis_tready,\n    input  wire                    s_axis_tlast,\n\n    output wire [DATA_WIDTH-1 : 0] m_axis_tdata,\n    output wire                    m_axis_tvalid,\n    input  wire                    m_axis_tready,\n    output wire                    m_axis_tlast\n);\n\n    // Handshake Signals\n    wire s_handshake;\n    wire m_handshake;\n\n    assign s_handshake = s_axis_tvalid &amp;&amp; s_axis_tready;\n    assign m_handshake = m_axis_tvalid &amp;&amp; m_axis_tready;\n\n    // Write and Read Indexes\n    reg [1:0] w_idx;\n    reg [1:0] r_idx;\n\n    always @(posedge aclk) begin\n        if (!aresetn) begin\n            w_idx &lt;= 2'b00;\n        end else if (s_handshake) begin\n            w_idx &lt;= w_idx + 1;\n        end\n    end\n\n    always @(posedge aclk) begin\n        if (!aresetn) begin\n            r_idx &lt;= 2'b00;\n        end else if (m_handshake) begin\n            r_idx &lt;= r_idx + 1;\n        end\n    end\n\n    // State Machine\n    localparam integer EMPTY = 2'b00;\n    localparam integer ACTIVE = 2'b01;\n    localparam integer FULL = 2'b11;\n\n    reg [1:0] state;\n\n    always @(*) begin\n        if (w_idx == r_idx) begin\n            state = EMPTY;\n        end else if (w_idx[0] != r_idx[0]) begin\n            state = ACTIVE;\n        end else begin\n            state = FULL;\n        end\n    end\n\n    // Pipeline Stall\n    reg stall;\n\n    always @(posedge aclk) begin\n        if (!aresetn) begin\n            stall &lt;= 1'b1;\n        end else if (m_handshake) begin\n            stall &lt;= !enable || (state == ACTIVE &amp;&amp; !s_handshake);\n        end else if (stall &amp;&amp; enable &amp;&amp; (s_handshake || state != EMPTY)) begin\n            stall &lt;= 1'b0;\n        end\n    end\n\n    assign s_axis_tready = aresetn ? (state == EMPTY || state == ACTIVE) : 1'b0;\n    assign m_axis_tvalid = (!stall) ? (state == ACTIVE || state == FULL) : 1'b0;\n\n    // Process Data\n    localparam integer TOTAL_WIDTH = DATA_WIDTH + 1;\n\n    reg  [TOTAL_WIDTH-1 : 0] data_o [0:1];\n\n    always @(posedge aclk) begin\n        if (s_axis_tvalid &amp;&amp; s_axis_tready) begin\n            data_o[w_idx[0]] &lt;= {s_axis_tlast, s_axis_tdata};\n        end\n    end\n\n    assign {m_axis_tlast, m_axis_tdata} = data_o[r_idx[0]];\n\nendmodule\n</code></pre>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#_6","title":"\u5faa\u73af\u7f13\u51b2\u533a","text":"<p>\u5982\u679c\u80fd\u591f\u63a5\u53d7\u90e8\u5206\u6570\u636e\u7684\u4e22\u5931\uff0c \u6216\u8005\u5e0c\u671b\u83b7\u53d6\u5373\u65f6\u7684\u6570\u636e \uff08\u5982ADC\u91c7\u6837\u6570\u636e\uff09\uff0c \u5219\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\u7f13\u51b2\u533a\uff0c \u5f53\u6d41\u6c34\u7ebf\u963b\u585e\u65f6\uff0c \u65b0\u6570\u636e\u8986\u76d6\u65e7\u6570\u636e\u3002</p> <p>\u7b80\u5355\u7684\u5faa\u73af\u7f13\u51b2\u533a\u53ea\u7528\u5c06<code>tready</code>\u4e00\u76f4\u62c9\u9ad8\u5c31\u53ef\u4ee5\u4e86\uff0c \u4f46\u662f\u5982\u679c\u6570\u636e\u662f\u6309\u5e27\u53d1\u9001\u7684\uff0c \u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u5305\u7684\u5b8c\u6574\u6027\uff0c \u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u7f13\u51b2\u533a\u4ea4\u66ff\u8bfb\u5199\u3002</p> Example axis_circular_buffer.v<pre><code>module axis_circular_buffer #(\n    parameter integer DATA_WIDTH  = 32,\n    parameter integer TID_WIDTH   = 8,\n    parameter integer BUFFER_SIZE = 16\n) (\n    input wire aclk,\n    input wire aresetn,\n\n    input  wire [DATA_WIDTH-1:0] s_axis_tdata,\n    input  wire                  s_axis_tvalid,\n    output wire                  s_axis_tready,\n    input  wire                  s_axis_tlast,\n    input  wire [ TID_WIDTH-1:0] s_axis_tid,\n\n    output wire [DATA_WIDTH-1:0] m_axis_tdata,\n    output wire                  m_axis_tvalid,\n    input  wire                  m_axis_tready,\n    output wire                  m_axis_tlast,\n    output wire [ TID_WIDTH-1:0] m_axis_tid\n);\n\n    // Handshake signals\n    wire s_handshake;\n    wire m_handshake;\n\n    assign s_handshake = s_axis_tvalid &amp;&amp; s_axis_tready;\n    assign m_handshake = m_axis_tvalid &amp;&amp; m_axis_tready;\n\n    // Buffer Selection\n    reg w_buf_sel;\n    reg r_buf_sel;\n\n    // Index\n    localparam integer INDEX_WIDTH = $clog2(BUFFER_SIZE);\n    reg [INDEX_WIDTH-1:0] w_idx;\n    reg [INDEX_WIDTH-1:0] r_idx;\n\n    always @(posedge aclk) begin\n        if (!aresetn) begin\n            w_buf_sel &lt;= 1'b0;\n            w_idx     &lt;= 0;\n        end else if (s_handshake) begin\n            if (s_axis_tlast) begin\n                w_buf_sel &lt;= ~r_buf_sel;  // Switch to the unused buffer\n                w_idx     &lt;= 0;\n            end else if (w_idx &lt; BUFFER_SIZE - 1) begin\n                w_idx &lt;= w_idx + 1;\n            end\n        end\n    end\n\n    always @(posedge aclk) begin\n        if (!aresetn) begin\n            r_buf_sel &lt;= 1'b0;\n            r_idx     &lt;= 0;\n        end else if (m_handshake) begin\n            if (m_axis_tlast) begin\n                r_buf_sel &lt;= ~r_buf_sel;  // Switch to the other buffer\n                r_idx     &lt;= 0;\n            end else if (r_idx &lt; BUFFER_SIZE - 1) begin\n                r_idx &lt;= r_idx + 1;\n            end\n        end\n    end\n\n    assign s_axis_tready = aresetn ? 1'b1 : 1'b0;\n    assign m_axis_tvalid = w_buf_sel != r_buf_sel || w_idx != r_idx;\n\n    // Double Buffer\n    localparam integer TOTAL_WIDTH = DATA_WIDTH + TID_WIDTH + 1;\n\n    reg [TOTAL_WIDTH-1:0] buffer[0:1][0:BUFFER_SIZE-1];\n\n    always @(posedge aclk) begin\n        if (s_handshake) begin\n            buffer[w_buf_sel][w_idx] &lt;= {s_axis_tlast, s_axis_tid, s_axis_tdata};\n        end\n    end\n\n    assign {m_axis_tlast, m_axis_tid, m_axis_tdata} = buffer[r_buf_sel][r_idx];\n\nendmodule\n</code></pre>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#_7","title":"\u4eff\u771f","text":""},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#axi-stream-vip","title":"AXI-Stream VIP","text":"<p>\u53ef\u4ee5\u4f7f\u7528Xilinx\u5b98\u65b9\u7684 AXI-Stream VIP \u8fdb\u884c\u4eff\u771f\u3002</p> <p>\u53c2\u8003\u8fd9\u7bc7\u535a\u5ba2MicroZed Chronicles: AXI Stream Verification IP,</p> <p>\u5b98\u65b9\u6587\u6863PG277\u7684Test Bench\u4e00\u8282\u4e5f\u6709\u4ecb\u7ecd\u3002</p> <p>\u4e00\u4e2a\u6bd4\u8f83\u79bb\u8c31\u7684\u95ee\u9898\u662fVivado\u4f1a\u4e00\u76f4\u663e\u793a\u627e\u4e0d\u5230\u76f8\u5e94\u7684\u5305\uff0c \u4f46\u662f\u4e0d\u5f71\u54cd\u4eff\u771f\u3002</p> <p>\u53ef\u4ee5\u5728\u6b64\u5904\u4e0b\u8f7d VIP\u7684\u5b8c\u6574\u6587\u6863 xilinx-vip-api-2021-2.zip\u3002</p>"},{"location":"fpga/AXI-Stream%E6%8E%A5%E5%8F%A3/#cocotb","title":"Cocotb","text":"<p>\u901a\u8fc7 cocotbext-axi \u6269\u5c55\u53ef\u4ee5\u5b9e\u73b0\u5bf9AXI-Stream\u7684\u4eff\u771f\u3002</p> <p><code>AxiStreamSource</code>\u53ef\u4ee5\u9a71\u52a8\u4e3b\u63a5\u53e3\uff0c <code>AxiStreamSink</code>\u53ef\u4ee5\u9a71\u52a8\u4ece\u63a5\u53e3\uff0c <code>AxiStreamMonitor</code>\u4e0d\u9a71\u52a8\u4efb\u4f55\u4fe1\u53f7\uff0c\u7528\u4e8e\u76d1\u63a7\u6d41\u91cf\u3002</p> Example \u6839\u636e\u540d\u79f0\u67e5\u627e\u603b\u7ebf<pre><code>from cocotbext.axi import (AxiStreamBus, AxiStreamSource, AxiStreamSink, AxiStreamMonitor)\n\nsource = AxiStreamSource(AxiStreamBus.from_prefix(dut, 's_axis'), dut.aclk, dut.aresetn, reset_active_level=False)\nsink = AxiStreamSink(AxiStreamBus.from_prefix(dut, 'm_axis'), dut.aclk, dut.aresetn, reset_active_level=False)\nmonitor = AxiStreamMonitor(AxiStreamBus.from_prefix(dut, 'int_axis'), dut.aclk, dut.aresetn, reset_active_level=False)\n</code></pre> <p>\u6570\u636e\u7684\u53d1\u9001\u548c\u63a5\u6536\u90fd\u662f\u4ee5<code>frame</code>\u4e3a\u5355\u4f4d\u7684\uff0c \u6bcf\u4e00\u5e27\u90fd\u4ee5tlast\u7ed3\u5c3e\u3002 \u5e27\u7684\u5bb9\u5668\u4e3a<code>AxiStreamFrame</code>\u3002 \u5176\u4e2d<code>tdata</code>\u6570\u636e\u4ee5<code>bytearray</code>\u5b58\u50a8\uff0c \u5bf9\u4e8e\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u636e\u5e94\u5f53\u5728\u53d1\u9001\u524d\u8fdb\u884c\u6570\u636e\u7684\u8f6c\u6362\uff0c Python\u7684\u4f4d\u64cd\u4f5c\u57fa\u672c\u90fd\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff0c \u4e0d\u5982Verilog\u4fbf\u5229\uff0c \u5728\u6570\u636e\u8f6c\u6362\u4e2d\u8981\u7279\u522b\u6ce8\u610f\u6570\u636e\u7684\u5bf9\u9f50\u3002 \u540c\u65f6\u6ce8\u610fVerilog\u7684\u6570\u636e\u5411\u91cf\u4e00\u822c\u90fd\u662f\u5c0f\u7aef\u5e8f\u7684\u3002</p> Example int\u6570\u7ec4\u5411bytearray\u7684\u8f6c\u6362<pre><code>frame_data = bytearray().join(\n    [value.to_bytes(width_bytes, byteorder='little', signed=True) for value in values]\n)\n</code></pre> \u975e\u6574\u5b57\u8282\u5bbd\u6709\u7b26\u53f7\u6570\u8f6c\u6362\u4e3aint<pre><code>mask = 2**width_bits-1\nvalue = int.from_bytes(data, byteorder='little', signed=False)\nvalue &amp;= mask\nif value &gt;= 2**(width_bits - 1):\n    value -= 2**width_bits\n</code></pre> \u5c06bytearray\u4ee516\u8fdb\u5236\u663e\u793a<pre><code>print(f\"Frame: {frame.tdata.value.hex()}\")\n</code></pre> <p>\u4f7f\u7528<code>send(frame)</code>\u51fd\u6570\u53d1\u9001\u6570\u636e\u5e27\uff0c \u6a21\u5757\u4f1a\u81ea\u52a8\u5728\u672b\u5c3e\u62c9\u9ad8<code>tlast</code>\uff0c <code>send_nowait</code>\u662f<code>send</code>\u7684\u975e\u963b\u585e\u7248\u672c\u3002 \u6ce8\u610f\u65e0\u8bba\u662f<code>send</code>\u8fd8\u662f<code>send_nowait</code>\u90fd\u53ea\u662f\u628a\u6570\u636e\u653e\u5165\u5230\u4e86\u53d1\u9001\u7f13\u51b2\u533a\uff0c \u5982\u679c\u9700\u8981\u7b49\u5f85\u4eff\u771f\u4e2d\u53d1\u9001\u63e1\u624b\u5b8c\u6210\uff0c \u53ef\u4ee5\u4f7f\u7528<code>wait()</code>\u51fd\u6570\uff0c \u6216\u8005\u5728\u521b\u5efa<code>AxiStreamFrame</code>\u65f6\u4f20\u5165<code>tx_complete=Event()</code>\u53c2\u6570\u3002 <code>write(data)</code>\u548c<code>write_nowait(data)</code>\u662f <code>send</code>\u548c<code>send_nowait</code>\u7684\u522b\u540d\uff0c \u529f\u80fd\u5b8c\u5168\u76f8\u540c\u3002</p> <p>\u4f7f\u7528<code>recv()</code>\u53ef\u4ee5\u63a5\u6536\u6570\u636e\u5e27\uff0c <code>recv_nowait()</code>\u662f<code>recv()</code>\u7684\u975e\u963b\u585e\u7248\u672c\u3002 <code>read(count)</code>\u6216<code>read_nowait(count)</code>\u53ef\u4ee5\u8bfb\u53d6\u6307\u5b9a\u7684\u5b57\u8282\u6570\uff0c \u4f46\u4f1a\u62c6\u6563\u539f\u6709\u7684<code>frame</code>\u3002 \u5373\u4f7f\u4e0d\u8c03\u7528\u63a5\u6536\u51fd\u6570\uff0c \u6a21\u5757\u4e5f\u4f1a\u8fdb\u884c\u63e1\u624b\u5e76\u5c06\u6570\u636e\u5b58\u50a8\u5230\u7f13\u51b2\u533a\uff0c \u63a5\u6536\u51fd\u6570\u5219\u662f\u4ece\u7f13\u51b2\u533a\u8bfb\u53d6\u6570\u636e\uff0c \u5982\u679c\u63a5\u6536\u6570\u636e\u4e0d\u591f\u5219\u4f1a\u963b\u585e\u3002 \u5982\u679c\u5e0c\u671b\u7b49\u5f85\u4eff\u771f\u4e2d\u6570\u636e\u5e27\u63a5\u6536\u5b8c\u6bd5\uff0c \u53ef\u4ee5\u4f7f\u7528<code>wait(timeout=0, timeout_unit='ns')</code>\u3002</p> <p>\u5982\u679c\u5e0c\u671b\u63a7\u5236\u5b9e\u9645\u7684\u63e1\u624b\u884c\u4e3a\uff0c \u5373<code>s_axis_tvalid</code>\u6216<code>m_axis_tready</code>\u7684\u62c9\u9ad8\u6216\u62c9\u4f4e\uff0c \u53ef\u4ee5\u4f7f\u7528<code>set_pause_generator(generator)</code>\uff0c \u53c2\u6570\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c \u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u66f4\u65b0\u4e00\u6b21\uff0c \u5982\u679c\u66f4\u65b0\u7684\u503c\u4e3a<code>True</code>\uff0c \u5219\u63e1\u624b\u6682\u505c\u3002 \u4f7f\u7528<code>clear_pause_generator()</code>\u53ef\u4ee5\u6e05\u9664\u751f\u6210\u5668\u3002</p> Warning <p><code>clear_pause_generator()</code>\u4ec5\u4ec5\u662f\u6e05\u9664\u4e86\u751f\u6210\u5668\uff0c \u5e76\u4e0d\u4f1a\u6539\u53d8\u5f53\u524d\u7684\u72b6\u6001\u3002 \u5982\u679c\u5728\u6e05\u9664\u4e4b\u524d\u63a5\u53e3\u5904\u4e8e\u6682\u505c\u72b6\u6001\uff0c \u5219\u4f1a\u4e00\u76f4\u6682\u505c\u4e0b\u53bb\u3002 \u5efa\u8bae\u4f20\u5165\u4e00\u4e2a\u4e00\u76f4\u4e3a<code>False</code>\u7684\u751f\u6210\u5668\u786e\u4fdd\u63a5\u53e3\u6b63\u5e38\u5de5\u4f5c\u3002</p> <pre><code>sink.set_pause_generator(iter(lambda: False, None)) \n# Optional\nawait RisingEdge(dut.aclk)\nsink.clear_puase_generator()\n</code></pre>"},{"location":"fpga/%E5%AE%9A%E7%82%B9%E6%95%B0/","title":"\u5b9a\u70b9\u6570","text":""},{"location":"fpga/%E5%AE%9A%E7%82%B9%E6%95%B0/#q","title":"Q\u683c\u5f0f","text":"<p>\u8bb0\u4e3a<code>MQN</code>\u6216<code>QM.N</code>\u7b49\uff0c \u8868\u793a\u67091\u4f4d\u7b26\u53f7\u4f4d\uff0cM\u4f4d\u6574\u6570\u4f4d\u548cN\u4f4d\u5c0f\u6570\u4f4d\uff0c \u6709\u65f6\u4e5f\u4f1a\u53ea\u5199\u51fa\u5c0f\u6570\u90e8\u5206\u7684\u4f4d\u6570\uff0c\u5982<code>Q15</code>\u3002</p> <p>\u672c\u8eab\u4ecd\u7136\u53ef\u4ee5\u770b\u4f5c\u4e8c\u7684\u8865\u7801\u7684\u6574\u6570\uff0c \u4f46\u662f\u5e26\u6709\\(2^{-N}\\)\u7684\u7f29\u653e\u56e0\u5b50\uff0c \u6216\u8005\u8bf4\u76f8\u6bd4\u539f\u6570\u503c\u653e\u5927\u4e86\\(2^{N}\\)\u500d\u3002</p>"},{"location":"fpga/%E5%AE%9A%E7%82%B9%E6%95%B0/#q_1","title":"\u5e38\u89c1\u7684Q\u683c\u5f0f\u6570","text":""},{"location":"fpga/%E5%AE%9A%E7%82%B9%E6%95%B0/#cordic-ip","title":"Cordic ip\u6838","text":"<p>\u89d2\u5ea6\u662f<code>2QN</code>\u683c\u5f0f\u7684\uff0c\u8303\u56f4\u4e3a\\(-\\pi\\)~\\(\\pi\\)\uff0c \u5982\u679c\u9009\u62e9\u4e86<code>Scaled Radian</code>\uff0c \u5219\u8303\u56f4\u4e3a\\(-1\\)~\\(1\\)\uff1b</p> <p>\u5e45\u5ea6\u662f<code>1QN</code>\u683c\u5f0f\u7684\uff0c\u8303\u56f4\u4e3a\\(-1\\)~\\(1\\)\uff1b</p> <p>\u4e00\u822c\u7684\u5b9a\u70b9\u6570\u53ef\u4ee5\u770b\u4f5c\u662f<code>0QN</code>\u683c\u5f0f\u7684\uff0c \u6bd4\u5982\u8bf4\u4e00\u822c\u7684\u76f8\u4f4d\u7d2f\u52a0\u5668\u4ece\\(0\\)\u7d2f\u52a0\u5230\\(2^{N}-1\\)\u518d\u6ea2\u51fa\uff0c \u5982\u679c\u8981\u9001\u5230<code>Cordic</code>ip\u6838\u4e2d\u5c31\u8981\u8fdb\u884c\u683c\u5f0f\u8f6c\u6362 (\u66f4\u591a\u5185\u5bb9\u89c1PG105)\u3002</p>"},{"location":"fpga/%E5%AE%9A%E7%82%B9%E6%95%B0/#_2","title":"\u683c\u5f0f\u8f6c\u6362","text":"Verilog\u6a21\u5757Python\u6a21\u578b q_format_converter.v<pre><code>`define ALIGNED(width) ((width + 7) / 8 * 8)\n`define SAFE_WIDTH(width) width &gt; 0 ? width : 1\n\nmodule q_format_converter #(\n    parameter integer M_IN = 1,\n    parameter integer N_IN = 1,\n    parameter integer M_OUT = 1,\n    parameter integer N_OUT = 1,\n    parameter integer ALLOW_OVERFLOW = 1\n) (\n    input wire aclk,\n    input wire aresetn,\n\n    input  wire [`ALIGNED(M_IN+N_IN+1)-1 : 0] s_axis_tdata,\n    output wire                               s_axis_tready,\n    input  wire                               s_axis_tvalid,\n    input  wire                               s_axis_tlast,\n\n    output wire [`ALIGNED(M_OUT+N_OUT+1)-1 : 0] m_axis_tdata,\n    input  wire                                 m_axis_tready,\n    output wire                                 m_axis_tvalid,\n    output wire                                 m_axis_tlast\n);\n\n    localparam integer S_M_IN = `SAFE_WIDTH(M_IN);\n    localparam integer S_N_IN = `SAFE_WIDTH(N_IN);\n    localparam integer S_M_OUT = `SAFE_WIDTH(M_OUT);\n    localparam integer S_N_OUT = `SAFE_WIDTH(N_OUT);\n\n    // Data\n    wire [  M_IN+N_IN : 0] data_i;\n    wire [M_OUT+N_OUT : 0] data_o;\n\n    assign data_i = s_axis_tdata[M_IN+N_IN : 0];\n\n    // Sign Bit\n    wire sgn_i;\n    wire sgn_o;\n\n    assign sgn_i = data_i[M_IN+N_IN];\n    assign sgn_o = sgn_i;\n\n    // Fractional Part\n    wire [ S_N_IN-1 : 0] frac_i;\n    wire [S_N_OUT-1 : 0] frac_o;\n\n    assign frac_i = data_i[S_N_IN-1 : 0];\n\n    generate\n        if (N_IN &gt; N_OUT) begin : gen_n_fit\n            // Fit Fractional Part\n            assign frac_o = frac_i[N_IN-1 : N_IN-S_N_OUT];\n        end else if (N_IN &lt; N_OUT) begin : gen_n_expand\n            // Expand Fractional Part\n            if (N_IN &gt; 0) begin : gen_n_expand_exist\n                assign frac_o = {frac_i, {N_OUT - N_IN{1'b0}}};\n            end else begin : gen_n_expand_zero\n                assign frac_o = {N_OUT{1'b0}};\n            end\n        end else begin : gen_n_keep\n            // Keep Fractional Part\n            assign frac_o = frac_i;\n        end\n    endgenerate\n\n\n    // Integer Part\n    wire [ S_M_IN-1 : 0] int_i;\n    wire [S_M_OUT-1 : 0] int_o;\n\n    assign int_i = data_i[S_M_IN+N_IN-1 : N_IN];\n\n    generate\n        if (M_IN &gt; M_OUT) begin : gen_m_fit\n            // Fit Integer Part\n            assign int_o = int_i[S_M_OUT-1 : 0];\n        end else if (M_IN &lt; M_OUT) begin : gen_m_expand\n            // Expand Integer Part\n            if (M_IN &gt; 0) begin : gen_m_expand_exist\n                assign int_o = {{M_OUT - M_IN{sgn_i}}, int_i};\n            end else begin : gen_m_expand_zero\n                assign int_o = {M_OUT{sgn_i}};\n            end\n        end else begin : gen_m_keep\n            // Keep Integer Part\n            assign int_o = int_i;\n        end\n    endgenerate\n\n    wire [M_OUT+N_OUT : 0] sgn_int_frac_o;\n\n    assign sgn_int_frac_o[M_OUT+N_OUT] = sgn_o;\n\n    if (M_OUT &gt; 0) begin : gen_int_exist\n        assign sgn_int_frac_o[M_OUT+N_OUT-1 : N_OUT] = int_o;\n    end\n\n    if (N_OUT &gt; 0) begin : gen_frac_exist\n        assign sgn_int_frac_o[N_OUT-1 : 0] = frac_o;\n    end\n\n    generate\n        if (M_IN &gt; M_OUT &amp;&amp; !ALLOW_OVERFLOW) begin : gen_saturation\n            wire overflow;\n            assign overflow = |({M_IN - M_OUT{sgn_i}} ^ int_i[M_IN-1 : M_OUT]);\n\n            assign data_o = (overflow)  // Overflow Check\n                ? {sgn_o, {M_OUT + N_OUT{~sgn_o}}}  // Saturation\n                : sgn_int_frac_o;  // Normal Value\n        end else begin : gen_overflow\n            assign data_o = sgn_int_frac_o;  // Normal Value\n        end\n    endgenerate\n\n    reg [`ALIGNED(M_OUT+N_OUT+1)-1 : 0] tdata;\n    reg                                 tvalid;\n    reg                                 tlast;\n\n    assign s_axis_tready = aresetn ? (!m_axis_tvalid || m_axis_tready) : 1'b0;\n\n    always @(posedge aclk) begin\n        if (!aresetn) begin\n            tvalid &lt;= 1'b0;\n        end else if (s_axis_tready &amp;&amp; s_axis_tvalid) begin\n            tvalid &lt;= 1'b1;\n        end else if (m_axis_tready &amp;&amp; m_axis_tvalid) begin\n            tvalid &lt;= 1'b0;\n        end\n    end\n\n    always @(posedge aclk) begin\n        if (s_axis_tready &amp;&amp; s_axis_tvalid) begin\n            tdata &lt;= data_o;\n            tlast &lt;= s_axis_tlast;\n        end\n    end\n\n    assign m_axis_tdata  = tdata;\n    assign m_axis_tvalid = tvalid;\n    assign m_axis_tlast  = tlast;\n\nendmodule\n</code></pre> test_q_format_converter.py<pre><code>class QFormatMetrics:\n    def __init__(self, M = 1, N = 1, allow_overflow = False):\n        self.M = M\n        self.N = N\n        self.allow_overflow = allow_overflow\n\n    def to_fixed_point(self, value : float):\n        if not self.allow_overflow:\n            if value &gt; 2**self.M - 2**(-self.N) :\n                return 2**(self.M+self.N) - 1\n            elif value &lt; -2**self.M:\n                return -2**(self.M+self.N)\n        if value &gt;= 0:\n            value = value % 2**self.M\n        else:\n            value = value % 2**self.M - 2**self.M\n        return math.floor(value * (2**self.N))\n\n\n    def to_float(self, data : int):\n        return data / (2**self.N)\n</code></pre>"},{"location":"fpga/verilog/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/","title":"\u7f16\u7801\u89c4\u8303","text":""},{"location":"fpga/verilog/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/#_2","title":"\u590d\u4f4d","text":"<p>Xilinx\u5b98\u65b9\u7684\u5efa\u8bae\u662f\u80fd\u4e0d\u590d\u4f4d\u5c31\u4e0d\u590d\u4f4d\uff0c \u5982\u679c\u9700\u8981\u590d\u4f4d\u7684\u8bdd\u4f18\u5148\u4f7f\u7528\u540c\u6b65\u590d\u4f4d (\u89c1UG949)</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c \u63a7\u5236\u4fe1\u53f7\u5982\uff08\u72b6\u6001\u673a\u3001\u8ba1\u6570\u5668\u7b49\uff09\u9700\u8981\u590d\u4f4d\uff0c \u800c\u6570\u636e\u4fe1\u53f7\u4e0d\u9700\u8981\u590d\u4f4d\u3002 \u4f46\u662f\u4e00\u4e9b\u6570\u636e\u4e0d\u590d\u4f4d\u7684\u8bdd\u4f1a\u5728\u4eff\u771f\u4e2d\u663e\u793a\u4e3a<code>x</code>\uff0c \u53ef\u4ee5\u4f7f\u7528\u8d4b\u521d\u503c\u7684\u65b9\u5f0f\u4ee3\u66ff\u3002</p>"},{"location":"fpga/verilog/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/#_3","title":"\u540c\u6b65\u590d\u4f4d","text":"<pre><code>always @(posedge aclk) begin\n    if (!aresetn) begin\n        ...\n    end else begin\n        ... \n    end\nend\n</code></pre>"},{"location":"fpga/verilog/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/#_4","title":"\u8d4b\u521d\u503c","text":"<pre><code>reg register = INIT_WORD;\n</code></pre> <p>\u6216</p> <pre><code>initial begin\n    register = INIT_WORD;\nend\n</code></pre> <p>\u6ce8\u610f\u8d4b\u521d\u503c\u5728FPGA\u4e2d\u662f\u53ef\u7efc\u5408\u7684\u884c\u4e3a\uff0c \u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u8d4b\u503c\u4e00\u4e9b\u5e38\u91cf\uff0c \u4e0d\u8fc7\u5982\u679c\u662f\u53d8\u91cf\u7684\u8bdd\u8fd8\u662f\u590d\u4f4d\u66f4\u7a33\u59a5\u3002</p>"},{"location":"fpga/verilog/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/#_5","title":"\u4ee3\u7801\u7ed3\u6784","text":"<p>\u5efa\u8bae\u63a7\u5236\u901a\u8def\u548c\u6570\u636e\u901a\u8def\u5206\u5f00\uff0c \u4fbf\u4e8e\u7ef4\u62a4\u3002</p>"},{"location":"fpga/%E4%BB%BF%E7%9C%9F/cocotb/","title":"Cocotb","text":"<p>Cocotb \u662f\u4e00\u4e2a\u4f7f\u7528Python\u8fdb\u884c\u4eff\u771f\u7684\u6846\u67b6\u3002</p> <p>\u5b98\u65b9\u6587\u6863: https://docs.cocotb.org/en/stable/</p>"},{"location":"fpga/%E4%BB%BF%E7%9C%9F/cocotb/#_1","title":"\u57fa\u7840\u4f7f\u7528","text":"<p>Cocotb\u4f7f\u7528 \u534f\u7a0b(Coroutines) \u5b9e\u73b0\u6d4b\u8bd5\u7684\u5e76\u53d1\u63a7\u5236\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7<code>cocotb.test()</code>\u6ce8\u518c\u6d4b\u8bd5\u51fd\u6570\uff0c \u6d4b\u8bd5\u51fd\u6570\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c \u9700\u8981\u6dfb\u52a0<code>async</code>\u5173\u952e\u5b57\u3002 \u4e00\u4e2a\u6587\u4ef6\u53ef\u4ee5\u6709\u591a\u4e2a\u6d4b\u8bd5\u51fd\u6570\uff0c \u5728\u6d4b\u8bd5\u4e2d\u5c06\u4f1a\u4f9d\u6b21\u6267\u884c\u3002</p> <p>\u5f85\u6d4b\u6a21\u5757\u5c06\u4f1a\u901a\u8fc7\u53c2\u6570 <code>dut</code>(Design Under Test) \u4f20\u5165\u51fd\u6570\u3002</p> <pre><code>import cocotb\n\n@cocotb.test()\nasync def my_test(dut):\n    pass\n</code></pre> <p>\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>.</code>\u6765\u8bbf\u95ee\u8bbe\u8ba1\u5185\u90e8\u7684\u4fe1\u53f7\uff0c \u5982\u679c\u9700\u8981\u83b7\u53d6\u6216\u4fee\u6539\u503c\uff0c \u5219\u9700\u8981\u4f7f\u7528<code>.value</code></p> <p>\u901a\u8fc7<code>async def</code>\u53ef\u4ee5\u5b9a\u4e49\u65b0\u7684\u534f\u7a0b\u5e76\u88ab\u6d4b\u8bd5\u8c03\u7528\uff0c \u4f7f\u7528<code>await</code>\u53ef\u4ee5\u7b49\u5f85\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\u3002 \u901a\u8fc7<code>cocotb.start_soon()</code>\u53ef\u4ee5\u542f\u52a8\u53e6\u4e00\u4e2a\u534f\u7a0b\u540c\u65f6\u8fd0\u884c\uff0c \u5e76\u8fd4\u56de\u4e00\u4e2a<code>cocotb.task</code>\u5bf9\u8c61\uff0c \u53ef\u4ee5\u901a\u8fc7<code>await</code>\u7b49\u5f85\u5176\u6267\u884c\u5b8c\u6bd5\u3002</p> Example <pre><code>async def reset(clk, rst_n):\n    rst_n.value = 0\n    await Timer(20, units=\"ns\")\n    rst_n.value = 1\n    await RisingEdge(clk)\n\nasync def background_task():\n    await Timer(100, units='ns')\n\n@cocotb.test()\nasync def my_test(dut):\n    cocotb.start_soon(Clock(dut.clk, 1, units='ns').start())\n\n    task = cocotb.start_soon(background_task()\n\n    await reset(dut.clk, dut.rst_n)\n\n    await task\n</code></pre> <p>\u53ef\u4ee5\u901a\u8fc7Makefile\u914d\u7f6ecocotb</p> Example <pre><code>SIM ?= modelsim\nWAVES ?= 1\nTOPLEVEL_LANG ?= verilog\n\nVERILOG_SOURCES += $(PWD)/my_design.v\n\nTOPLEVEL = my_design\n\nMODULE ?= my_test\n\nSIM_CMD_SUFFIX := 2&gt;&amp;1 | tee sim.log\n\ninclude $(shell cocotb-config --makefiles)/Makefile.sim\n</code></pre> <p>\u66f4\u591a\u914d\u7f6e\u53c2\u6570\u53c2\u8003 Build options and Environment Variables</p> <p>\u5728\u9ed8\u8ba4\u72b6\u6001\u4e0b\u4eff\u771f\u662f\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c\u7684\uff0c \u5982\u679c\u5e0c\u671b\u6253\u5f00GUI\u53ef\u4ee5\u914d\u7f6e<code>GUI=1</code>\uff0c \u6216\u8005\u53ef\u4ee5\u914d\u7f6e<code>WAVES=1</code>\uff0c \u5728\u4eff\u771f\u7ed3\u675f\u540e\u67e5\u770b\u6ce2\u5f62\u3002 \u5982\u4f7f\u7528Modelsim\u53ef\u4ee5\u6267\u884c\uff1a</p> <pre><code>vsim -view vsim.wlf -do \"add wave -noupdate /my_design/*\"\n</code></pre>"},{"location":"fpga/%E4%BB%BF%E7%9C%9F/cocotb/#vivado","title":"\u548cVivado\u8054\u52a8","text":"<p>\u5c3d\u7ba1Vivado\u5e76\u4e0d\u76f4\u63a5\u652f\u6301Cocotb\u7684\u4eff\u771f\uff0c \u4f46\u662fVivado\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e09\u65b9\u7684\u4eff\u771f\u5668\uff0c \u4ece\u800c\u95f4\u63a5\u5730\u5b9e\u73b0Cocotb\u5bf9Vivado\u7684ip\u6838\u7684\u4eff\u771f\u3002 \u8fd9\u91cc\u4ee5Modelsim\u4e3a\u4f8b\u3002</p> <p>\u9996\u5148\u9700\u8981\u914d\u7f6e\u597d\u4eff\u771f\u5668\u5e76\u7f16\u8bd1ip\u6838\uff0c \u63a5\u7740\u53ef\u4ee5\u901a\u8fc7Vivado\u7684 \u5bfc\u51fa\u4eff\u771f \u529f\u80fd\u6536\u96c6\u4eff\u771f\u9700\u8981\u7684\u6587\u4ef6\u548c\u811a\u672c\u3002</p> <p>\u5176\u4e2d<code>modelsim.ini</code>\u6587\u4ef6\u662f\u5404\u79cd\u5e93\u7684\u8def\u5f84\uff0c \u9700\u8981\u653e\u5230\u4eff\u771f\u76ee\u5f55\u4e0b\u3002 <code>gldl.v</code>\u662f\u5168\u5c40\u590d\u4f4d\u6a21\u5757\uff0c \u4e5f\u9700\u8981\u6dfb\u52a0\u5230\u5de5\u7a0b\u4e2d\uff0c \u8be5\u6a21\u5757\u4e5f\u53ef\u4ee5\u5728<code>$(XILINX_VIVADO)/data/verilog/src/glbl.v</code>\u4e2d\u627e\u5230\u3002</p> <p>\u6253\u5f00<code>compile.do</code>\u6587\u4ef6\uff0c \u5176\u4e2d\u7684<code>vlog</code>\u547d\u4ee4\u5305\u542b\u4e86\u4eff\u771f\u6240\u9700\u8981\u7f16\u8bd1\u7684\u6240\u6709\u6587\u4ef6\uff0c \u9700\u8981\u6dfb\u52a0\u5230Makefile\u4e2d\u3002 \u800c<code>xil_defaultlib</code>\u662fVivado\u4e3a\u4eff\u771f\u521b\u5efa\u7684\u5e93\uff0c \u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c \u5728Cocotb\u4e2d\u4e00\u822c\u662f<code>work</code>\u3002</p> <p>\u6253\u5f00<code>simulate.do</code>\u6587\u4ef6\uff0c \u5176\u4e2d\u7684<code>vsim</code>\u7684<code>-L</code>\u53c2\u6570\u5305\u62ec\u4e86\u6240\u6709\u4eff\u771f\u9700\u8981\u8fde\u63a5\u7684\u5e93\uff0c \u4e5f\u9700\u8981\u6dfb\u52a0\u5230Makefile\u4e2d\u3002</p> Example <p>\u5047\u8bbeVivado\u63d0\u4f9b\u7684\u811a\u672c\u5982\u4e0b:</p> compile.dosimulate.do <pre><code>vlib modelsim_lib/work\nvlib modelsim_lib/msim\n\nvlib modelsim_lib/msim/xil_defaultlib\n\nvmap xil_defaultlib modelsim_lib/msim/xil_defaultlib\n\nvlog -work xil_defaultlib -64 -incr -mfcu  \\\n\"srcs/sources_1/imports/pipeline/pipeline.v\" \\\n\"srcs/sources_1/imports/pipeline/axis_fifo_pipeline.v\" \\\n\n\nvlog -work xil_defaultlib \\\n\"glbl.v\"\n</code></pre> <pre><code>onbreak {quit -f}\nonerror {quit -f}\n\nvsim -voptargs=\"+acc\"  -L xil_defaultlib -L unisims_ver -L unimacro_ver -L secureip -L xpm -lib xil_defaultlib xil_defaultlib.axis_fifo_pipeline xil_defaultlib.glbl\n\nset NumericStdNoWarnings 1\nset StdArithNoWarnings 1\n\ndo {wave.do}\n\nview wave\nview structure\nview signals\n\ndo {axis_fifo_pipeline.udo}\n\nrun 1000ns\n\nquit -force\n</code></pre> <p>\u5219\u53ef\u4ee5\u5728Makefile\u4e2d\u6dfb\u52a0:</p> <pre><code>VERILOG_SOURCES += $(PWD)/pipeline.v\nVERILOG_SOURCES += $(XILINX_VIVADO)/data/verilog/src/glbl.v\n\nVSIM_ARGS += -L unisims_ver -L unimacro_ver -L secureip -L xpm work.glbl\n</code></pre> <p>\u672a\u6765\u4e5f\u8bb8\u53ef\u4ee5\u901a\u8fc7\u811a\u672c\u81ea\u52a8\u5b9e\u73b0\u8fd9\u4e00\u8fc7\u7a0b\u3002</p>"},{"location":"fpga/%E4%BB%BF%E7%9C%9F/cocotb/#cocotb-test","title":"\u4f7f\u7528cocotb-test","text":"<p>\u4f7f\u7528Makefile\u914d\u7f6e\u4eff\u771f\u4ecd\u7136\u6709\u8bf8\u591a\u4e0d\u4fbf\uff0c \u6bd4\u5982\u8bf4\u65e0\u6cd5\u4e00\u6b21\u6027\u6d4b\u8bd5\u591a\u4e2a\u6a21\u5757\uff0c \u65e0\u6cd5\u6539\u53d8\u53c2\u6570\u7b49\uff0c \u53ef\u4ee5\u4f7f\u7528 cocotb-test \u5b9e\u73b0\u901a\u8fc7Python\u6267\u884c\u4eff\u771f\u3002</p> <p>cocotb-test\u57fa\u4e8ePytest\u6846\u67b6\u3002 pytest\u4f1a\u81ea\u52a8\u67e5\u627e\u4ee5<code>test_</code>\u5f00\u5934\u7684\u6587\u4ef6\u8fd0\u884c\u6d4b\u8bd5\uff0c \u6d4b\u8bd5\u7684\u51fd\u6570\u4e00\u822c\u4e5f\u4ee5<code>test_</code>\u5f00\u5934\u3002 \u4f7f\u7528<code>cocotb_test.simulator.run</code>\u51fd\u6570\u8fd0\u884c<code>cocotb</code>\u6d4b\u8bd5\uff0c \u53c2\u6570\u548cMakefile\u7c7b\u4f3c\uff0c \u4f46\u662f<code>SIM</code>\u548c<code>WAVES</code>\u9700\u8981\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6307\u5b9a\uff0c \u8be6\u7ec6\u4fe1\u606f\u89c1Arguments for <code>simulator.run</code></p> <p>\u8fd0\u7528pytest\u7684<code>mark.paramtrize</code>\u53ef\u4ee5\u4e00\u6b21\u6027\u4f20\u5165\u591a\u7ec4\u53c2\u6570\uff0c \u5b9e\u73b0\u4e00\u6b21\u6027\u8fd0\u884c\u591a\u4e2a\u6d4b\u8bd5\u3002</p> <p>\u5728\u5b89\u88c5\u4e86pytest-xdist\u4e4b\u540e\uff0c \u53ef\u4ee5\u5b9e\u73b0\u5e76\u884c\u8fd0\u884c\u591a\u4e2a\u6d4b\u8bd5\uff0c \u63d0\u9ad8\u4eff\u771f\u901f\u5ea6\u3002</p> Example <p>\u901a\u8fc7<code>product</code>\u51fd\u6570\u751f\u6210\u591a\u7ec4\u53c2\u6570\uff0c \u5e76\u6307\u5b9a\u672c\u6587\u4ef6\u4f5c\u4e3atestbench\u3002</p> test_dff.py<pre><code>import cocotb\nimport cocotb_test.simulator\nimport pytest\nfrom itertools import product\nimport os\n\n@cocotb.test()\nasync def run_test_dff(dut):\n    pass\n\n@pytest.mark.parameterize(\"A, B\",\n    #[(0, 0), (0, 1), ...]\n    list(product(\n        [0, 1, 2], # A\n        [0, 1, 2], # B\n    ))\n)\ndef test_dff(A, B):\n    module = os.path.splitext(os.path.basename(__file__))[0]\n    dut = \"dff\"\n    toplevel = dut\n\n    verilog_sources = [\n        os.path.join(os.path.dirname(__file__), f\"{dut}.v\"),\n    ]\n\n    parameters = {\n        'A': A,\n        'B': B\n    }\n\n    cocotb_test.simulator.run(\n        verilog_sources=verilog_sources,\n        toplevel=toplevel,\n        module=module,\n        parameters=parameters,\n    )\n</code></pre> <p>\u6307\u5b9a\u4eff\u771f\u5668\u5e76\u8bbe\u7f6e8\u7ec4\u5e76\u884c\u4eff\u771f</p> <pre><code>SIM=modelsim WAVES=1 pytest -n 8 -o log_cli=True test_dff.py\n</code></pre> <p>cocotb-test\u540c\u6837\u53ef\u4ee5\u548cVivado\u8054\u52a8\uff0c \u4f46\u662f\u5728\u914d\u7f6e\u4e0a\u548cMakefile\u6709\u4e00\u4e9b\u4e0d\u540c\u3002 <code>vsim</code>\u7684\u53c2\u6570\u901a\u8fc7<code>sim_args</code>\u6307\u5b9a\uff0c \u800c\u4e14\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u53c2\u6570\u5fc5\u987b\u5206\u4e3a<code>list</code>\u7684\u4e0d\u540c\u9879\uff0c \u5426\u5219\u4f1a\u63d0\u793a<code>Unknown option</code>\uff0c \u6b64\u5916\u7f16\u8bd1\u7684\u6e90\u6587\u4ef6\u6240\u5728\u7684libaray\u9ed8\u8ba4\u4e0d\u518d\u662f<code>work</code>\uff0c \u800c\u662f<code>toplevel</code>\u7684\u540d\u79f0\u3002</p> Example <p>\u5bf9\u4e8e\u4e0a\u4f8b\u7684\u989d\u5916\u9009\u9879\u53ef\u4ee5\u8fd9\u6837\u914d\u7f6e\uff1a</p> <pre><code>sim_args = [\"-L\",\"unisims_ver\",\n            \"-L\",\"unimacro_ver\",\n            \"-L\",\"secureip\",\n            \"-L\",\"xpm\",\n            f\"{toplevel}.glbl\"\n        ]\n\nverilog_sources.append(\n    os.path.join(os.path.dirname(__file__), \"glbl.v\")\n)\nverilog_sources.append(\n    os.path.join(os.path.dirname(__file__), \"pipeline.v\")\n)\n</code></pre>"},{"location":"fpga/%E4%BB%BF%E7%9C%9F/cocotb/#cocotb_1","title":"Cocotb\u4e2d\u7684\u65f6\u95f4\u7ebf","text":"<p>\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0cocotb_primer/timeline</p> <p>\u4e00\u822c\u6765\u8bf4\uff0c\u4fe1\u53f7\u7684\u8d4b\u503c\u53ef\u4ee5\u5728\u7b49\u5f85\u65f6\u949f\u8fb9\u6cbf\u540e\u8fdb\u884c\uff0c \u5982\u679c\u8981\u8bfb\u53d6\u503c\uff0c\u5219\u9700\u8981\u7b49\u5f85<code>ReadOnly</code>\u3002</p> <pre><code>import cocotb\nfrom cocotb.clock import Clock\nfrom cocotb.triggers import Timer, RisingEdge, ReadOnly\n\nasync def set_and_check(dut):\n    while True:\n        await RisingEdge(dut.aclk) # Wait for clock edge\n        dut.write_bus.value = ...\n        await ReadOnly() # Ensure all signals are updated\n        assert dut.read_bus.value == ...\n</code></pre>"},{"location":"xilinx/Petalinux/","title":"Petalinux","text":"<p>\u57fa\u4e8ePetalinux 2024.2</p>"},{"location":"xilinx/Petalinux/#_1","title":"\u6784\u5efa\u6d41\u7a0b","text":""},{"location":"xilinx/Petalinux/#vivado","title":"Vivado\u8bbe\u8ba1","text":"<p>\u5bfc\u51faxsa\u6587\u4ef6</p>"},{"location":"xilinx/Petalinux/#sdt","title":"\u751f\u6210SDT","text":"<p>\u4f7f\u7528Xilinx\u7684System Device Tree Generator</p> <p>\u53c2\u8003</p> <ul> <li>\u65e7\u7248\u8bbe\u5907\u6811Wiki</li> </ul>"},{"location":"xilinx/Petalinux/#petalinux_1","title":"\u542f\u52a8Petalinux","text":"<pre><code>source ${DIR}/settings.sh\n</code></pre> <p>\u5bf9\u4e8eUbuntu\u7cfb\u7edf\u8fd8\u9700\u8981\u52a0\u4e0a</p> <pre><code>sudo sysctl -w kernel.apparmor_restrict_unprivileged_unconfined=0\nsudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0\n</code></pre> <p>\u6765\u81eaHelp me get my petalinux working (ubuntu 24.04 --- petalinux-v2023.2)</p>"},{"location":"xilinx/Petalinux/#_2","title":"\u4ece\u6a21\u677f\u65b0\u5efa\u5de5\u7a0b","text":"<pre><code>petalinux-create project --template &lt;PLATFORM&gt; --name &lt;PROJECT_NAME&gt;\n</code></pre> <p>\u53c2\u8003</p> <ul> <li>UG1144 Creating an Empty Project from a Template</li> </ul>"},{"location":"xilinx/Petalinux/#_3","title":"\u6307\u5b9a\u786c\u4ef6\u8bbe\u8ba1","text":"<pre><code>petalinux-config --get-hw-description /&lt;PATH-TO-SDT Directory&gt; \n</code></pre> <p>\u53c2\u8003</p> <ul> <li> <p>UG1144 Setting Up the System Devicetree</p> </li> <li> <p>UG1144 Importing Hardware Configuration</p> </li> </ul>"},{"location":"xilinx/Petalinux/#system","title":"System \u914d\u7f6e","text":"<p>\u5728\u6307\u5b9a\u786c\u4ef6\u8bbe\u8ba1\u540e\u81ea\u52a8\u5f39\u51fa\uff0c\u6216\u8f93\u5165</p> <pre><code>petalinux-config\n</code></pre>"},{"location":"xilinx/Petalinux/#_4","title":"\u8bbe\u7f6e\u79bb\u7ebf\u7f13\u5b58","text":"<ol> <li> <p>\u4e0b\u8f7d\u5e76\u89e3\u538b PetaLinux Tools sstate-cache Artifacts</p> </li> <li> <p>\u8bbe\u7f6ePre-mirror</p> <p>\u586b\u5165<code>downloads/</code>\u76ee\u5f55\u7684\u5730\u5740</p> <pre><code>petalinux-config ---&gt; Yocto Settings ---&gt; Add pre-mirror url ---&gt;\n</code></pre> <p>\u9700\u8981\u52a0\u5165<code>file://</code>\u524d\u7f00</p> </li> <li> <p>\u8bbe\u7f6eSState Feeds</p> <p>\u586b\u5165sstate\u955c\u50cf\u76ee\u5f55\u7684\u5730\u5740\uff0c\u5982\u5bf9\u4e8eZynq7000\u6765\u8bf4\u662f<code>arm/</code></p> <pre><code>petalinux-config ---&gt; Yocto Settings ---&gt; Local sstate feeds settings ---&gt; local sstate feeds url ---&gt;\n</code></pre> </li> <li> <p>\u5173\u95ed\u7f51\u7edc\u8fde\u63a5</p> <pre><code>petalinux-config ---&gt; Yocto Settings ---&gt; [*] Enable BB NO NETWORK\n                                          [ ] Enable Network sstate feeds\n</code></pre> </li> <li> <p>\u4fee\u6539\u914d\u7f6e\u6587\u4ef6</p> <p>\u5728/project-spec/meta-user/conf/petalinuxbsp.conf\u4e2d\u52a0\u5165</p> <pre><code>DL_DIR = \"/home/share/build/petalinux/2020.2/downloads\"\nSSTATE_DIR = \"/home/share/build/petalinux/2020.2/sstate_aarch64_2020.2/aarch64\"\n</code></pre> </li> </ol> <p>\u53c2\u8003</p> <ul> <li> <p>UG1144 Build Optimizations</p> </li> <li> <p>PetaLinux\u00ae \u30d3\u30eb\u30c9\u6642\u9593\u306e\u77ed\u7e2e\u65b9\u6cd5</p> </li> </ul>"},{"location":"xilinx/Petalinux/#device-tree","title":"Device Tree \u914d\u7f6e","text":"<p>\u5728SDT\u6d41\u7a0b\u4e2d\uff0c\u7531\u786c\u4ef6\u8bbe\u8ba1\u751f\u6210\u7684\u8bbe\u5907\u6811\u5728<code>project-spec/hw-description/</code>\u76ee\u5f55\u4e0b\uff0c \u7531\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u8bbe\u5907\u6811\u914d\u7f6e\u5728<code>project-spec/meta-user/recipes-bsp/device-tree/files/system-user.dtsi</code>\u3002</p> <p>\u53c2\u8003</p> <ul> <li>UG1144 Device Tree Configuration</li> </ul>"},{"location":"xilinx/Petalinux/#kernel","title":"Kernel \u914d\u7f6e","text":"<p>\u9700\u8981\u7528\u5230\u7684\u5185\u6838\u6a21\u5757</p> <pre><code>petalinux-config -c kernel\n</code></pre>"},{"location":"xilinx/Petalinux/#u-boot","title":"U-Boot \u914d\u7f6e","text":"<p>\u542f\u52a8\u9879\uff0c\u5f15\u5bfc\u7b49</p> <pre><code>petalinux-config -c u-boot\n</code></pre>"},{"location":"xilinx/Petalinux/#rootfs","title":"RootFS \u914d\u7f6e","text":"<pre><code>petalinux-config -c rootfs\n</code></pre> Example <ul> <li><code>lrzsz</code>: \u4f7f\u7528ZMODEM\u534f\u8bae\u5b9e\u73b0\u4e32\u53e3\u6587\u4ef6\u4f20\u8f93</li> </ul>"},{"location":"xilinx/Petalinux/#_5","title":"\u6784\u5efa","text":"<pre><code>petalinux-build\n</code></pre>"},{"location":"xilinx/Petalinux/#_6","title":"\u6253\u5305","text":"<p>\u9700\u8981\u5728<code>&lt;project-root-dir&gt;/image/linux</code>\u4e0b\u8fdb\u884c</p> <pre><code>petalinux-package boot --format BIN --fsbl zynq_fsbl.elf --u-boot u-boot.elf --fpga system.bit --force\n</code></pre>"},{"location":"xilinx/Petalinux/#sd","title":"\u4e0b\u8f7d\u5230SD\u5361","text":"<pre><code>sudo dd if=rootfs.ext4 of=/dev/sda2\ncp boot.scr BOOT.BIN image.ub /media/diculazyy/BOOT/\n</code></pre>"},{"location":"xilinx/Petalinux/#bsp","title":"\u6253\u5305\u4e3aBSP","text":"<pre><code>petalinux-package bsp -p &lt;plnx-proj-root&gt; --output MY.BSP\n</code></pre> <p>\u53c2\u8003</p> <ul> <li>UG1144 BSP Packaging</li> </ul> <p>\u5982\u679c\u6253\u5305\u62a5\u9519\uff0c\u53ef\u80fd\u9700\u8981\u4fee\u6539\u811a\u672c</p> <p>\u53c2\u8003</p> <ul> <li> Fix project argument of petalinux-package bsp #4 </li> <li>\u6211\u5c1d\u8bd5\u6253\u5305\u9879\u76eeBSP\u6587\u4ef6\u5931\u8d25</li> </ul>"},{"location":"xilinx/Petalinux/#sdk","title":"\u751f\u6210SDK","text":"<pre><code>petalinux-build --sdk\n</code></pre> <pre><code>petalinux-package sysroot -s|--sdk &lt;custom sdk path&gt; -d|--dir &lt;custom directory path&gt;\n</code></pre> <p>\u53c2\u8003</p> <ul> <li>SDK Generation</li> </ul>"},{"location":"xilinx/Petalinux/#hdmi","title":"HDMI\u914d\u7f6e","text":""},{"location":"xilinx/Petalinux/#device-tree_1","title":"Device Tree \u914d\u7f6e","text":"<pre><code>&amp;i2c0 {\n    clock-frequency = &lt;100000&gt;;\n    status = \"okay\";\n};\n\n&amp;amba_pl {\n    digilent_hdmi {\n        compatible = \"digilent,hdmi\";\n        clocks = &lt;&amp;axi_dynclk_0&gt;;\n        clock-names = \"clk\";\n        digilent,edid-i2c = &lt;&amp;i2c0&gt;;\n        digilent,fmax = &lt;150000&gt;;\n        port@0 {\n            hdmi_ep: endpoint {\n                remote-endpoint = &lt;&amp;pl_disp_ep&gt;;\n            };\n        };\n    };\n    xlnx_pl_disp {\n        compatible = \"xlnx,pl-disp\";\n        dmas = &lt;&amp;axi_vdma_0 0&gt;;\n        dma-names = \"dma0\";\n        xlnx,vformat = \"RG24\"; /*XR24*/\n        xlnx,bridge = &lt;&amp;v_tc_0&gt;;\n        xlnx,vtc = &lt;&amp;v_tc_0&gt;;\n        port@0 {\n            pl_disp_ep: endpoint {\n                remote-endpoint = &lt;&amp;hdmi_ep&gt;;\n            };\n        };\n    };\n};\n\n&amp;axi_dynclk_0 {\n    compatible = \"dglnt,axi-dynclk\";\n    #clock-cells = &lt;0&gt;;\n};\n\n&amp;v_tc_0 {\n    xlnx,pixels-per-clock = &lt;1&gt;;\n};\n\n&amp;axi_vdma_0 {\n    dma-ranges = &lt;0x00000000 0x00000000 0x40000000&gt;;\n};\n\n&amp;axi_gpio_hdmi {\n    compatible = \"generic-uio\";\n};\n</code></pre>"},{"location":"xilinx/Petalinux/#kernel_1","title":"Kernel\u914d\u7f6e","text":"<p>\u914d\u7f6eDRM</p> <pre><code># DRM \u6838\u5fc3\u652f\u6301\nCONFIG_DRM=y\nCONFIG_DRM_KMS_HELPER=y\n\n# Xilinx DRM \u9a71\u52a8\nCONFIG_DRM_XLNX=y\nCONFIG_DRM_XLNX_BRIDGE=y # KMS\u652f\u6301\nCONFIG_DRM_XLNX_BRIDGE_VTC=y # \u65f6\u5e8f\u540c\u6b65\n\nCONFIG_DRM_XLNX_BRIDGE_CSC=m # \u53ef\u9009\nCONFIG_DRM_XLNX_BRIDGE_SCALER=m # \u53ef\u9009\n\n# PL\u7aefHDMI\u8f93\u51fa\u914d\u7f6e\nCONFIG_DRM_XLNX_PL_DISPLAY=y # \u4f7f\u7528PL\u8f93\u51fa\n</code></pre> <p>Frame Buffer \u517c\u5bb9\u6027\u652f\u6301</p> <pre><code>CONFIG_FB=y\nCONFIG_FB_XILINX=y\nCONFIG_DRM_FBDEV_EMULATION=y  # DRM \u6a21\u62df fbdev \u8bbe\u5907\nCONFIG_FRAMEBUFFER_CONSOLE=y # \u4f7f\u7528FB\u663e\u793a\u7ec8\u7aef\n</code></pre> <p>HDMI\u76f8\u5173\u914d\u7f6e</p> <pre><code># EDID\nCONFIG_FIRMWARE_EDID=y\nCONFIG_DRM_LOAD_EDID_FIRMWARE=y\n</code></pre> <p>\u76f8\u5173\u5916\u8bbe\u9a71\u52a8</p> <pre><code># VDMA\nCONFIG_DMADEVICES=y\nCONFIG_XILINX_DMA=y\n\n# VTC\nCONFIG_VIDEO_XILINX_VTC=y\n\n# IIC\nCONFIG_I2C_CADENCE=y\n\n# GPIO\nCONFIG_GPIO_SYSFS=y\nCONFIG_SYSFS=y\nCONFIG_GPIO_XILINX=y\n\n# PIN_CTRL\nCONFIG_PINCTRL=y\nCONFIG_PINCTRL_ZYNQ=y\nCONFIG_ARCH_ZYNQ=y\nCONFIG_PINMUX=y\nCONFIG_GENERIC_PINCONF=y\n</code></pre>"},{"location":"xilinx/Petalinux/#u-boot_1","title":"U-Boot\u914d\u7f6e","text":"<pre><code># \u542f\u52a8\u65f6\u7684\u89c6\u9891\u663e\u793a\nCONFIG_VIDEO=y\n</code></pre>"},{"location":"xilinx/Petalinux/#rootfs_1","title":"RootFS\u914d\u7f6e","text":"<pre><code># DRM\nCONFIG_libdrm=y\nCONFIG_libdrm-drivers=y\n\n# \u8c03\u8bd5\nCONFIG_SYSFS=y\n</code></pre>"},{"location":"xilinx/Petalinux/#usb","title":"USB \u89e6\u63a7\u914d\u7f6e","text":""},{"location":"xilinx/Petalinux/#kernel_2","title":"Kernel\u914d\u7f6e","text":"<pre><code># HID\nCONFIG_HID=y\n\n# \u89e6\u63a7\nCONFIG_HID_MULTITOUCH=y\nCONFIG_INPUT_TOUCHSCREEN=y\n\n# USB\u8f93\u5165\u8bbe\u5907\nCONFIG_TOUCHSCREEN_USB_COMPOSITE=y\nCONFIG_TOUCHSCREEN_USB_GENERAL_TOUCH=y\n</code></pre>"},{"location":"xilinx/Petalinux/#lvgl","title":"LVGL \u914d\u7f6e","text":""},{"location":"xilinx/Petalinux/#layer","title":"Layer \u914d\u7f6e","text":"<p>\u7531\u4e8eLVGL\u5df2\u7ecf\u5305\u542b\u5728openembedded\u7684layer\u4e2d\uff0c \u800cPetalinux\u662f\u57fa\u4e8eYocto\u7684\uff0c \u76f8\u5173\u7684layer\u53ef\u4ee5\u5728<code>&lt;plnx-proj-root&gt;/components/yocto/layers</code>\u4e2d\u627e\u5230\uff0c \u6240\u4ee5\u4e0d\u9700\u8981\u81ea\u884c\u5b89\u88c5\u3002 \u7136\u800c\u8fd9\u4e9brecpies\u9ed8\u8ba4\u4e0d\u4f1a\u6784\u5efa\uff0c \u5fc5\u987b\u624b\u52a8\u6267\u884c</p> <pre><code>petalinux-build -c lvgl\n</code></pre> <p>\u7136\u540e\u5728<code>&lt;plnx-proj-root&gt;/project-spec/meta-user/conf/petalinuxbsp.conf</code>\u4e2d\u6dfb\u52a0</p> <pre><code>IMAGE_INSTALL:append = \" lvgl\"\nTOOLCHAIN_TARGET_TASK:append = \" lvgl\"\n</code></pre> <p>\u9ed8\u8ba4\u7684recipe\u4f1a\u4fee\u6539<code>lv_conf.h</code>\uff0c\u5982\u679c\u60f3\u8981\u4fee\u6539\u914d\u7f6e\uff0c \u5fc5\u987b\u5728\u6784\u5efa\u4e4b\u524d\u5b8c\u6210\uff0c \u53ef\u4ee5\u65b0\u5efa<code>&lt;plnx-proj-root&gt;/project-spec/meta-user/recipes-graphics/lvgl/lvgl_x.x.x.bbappend</code>\uff0c \u6ce8\u610f\u7248\u672c\u53f7\u9700\u8981\u5339\u914d\uff0c\u5177\u4f53\u53ef\u4ee5\u4fee\u6539\u7684\u53c2\u6570\u53ef\u4ee5\u53c2\u8003recipe\u7684<code>.bb</code>\u6587\u4ef6\u4ee5\u53ca<code>lv_conf.inc</code>\u3002</p> <p>\u53c2\u8003</p> <ul> <li>LVGL in Yocto</li> <li>How to get meta-oe layer packages installed in PetaLinux image</li> <li>Github - meta-openembedded/meta-oe/recipes-graphics/lvgl</li> </ul>"},{"location":"xilinx/Petalinux/#kernel_3","title":"Kernel\u914d\u7f6e","text":""},{"location":"xilinx/Petalinux/#rootfs_2","title":"RootFS\u914d\u7f6e","text":"<pre><code># \u5e93\nCONFIG_GLIBC=y\n\n# \u663e\u793a\u76f8\u5173\nCONFIG_FBSET=y\nCONIFG_LIBEVDEV=y\n</code></pre>"},{"location":"xilinx/Petalinux/#framebuffer","title":"FrameBuffer\u663e\u793a","text":"<p>\u5173\u95ed\u5149\u6807</p> <pre><code>echo 0 &gt; /sys/class/graphics/fbcon/cursor_blink\n</code></pre>"},{"location":"xilinx/Petalinux/#_7","title":"\u4e0a\u677f\u4e0e\u8c03\u8bd5","text":""},{"location":"xilinx/Petalinux/#jtag","title":"\u901a\u8fc7JTAG\u542f\u52a8","text":"<pre><code>petalinux-boot jtag --u-boot\n</code></pre> <p>\u4eceTFTP\u670d\u52a1\u5668\u4e0a\u62c9\u53d6\u955c\u50cf</p> <pre><code>setenv serverip 192.168.1.99\nsetenv ipaddr 192.168.1.100\ntftpboot 0x1000000 image.ub\n</code></pre> <p>\u542f\u52a8\u955c\u50cf</p> <pre><code>bootm 0x1000000\n</code></pre>"},{"location":"xilinx/Petalinux/#_8","title":"\u5f02\u6784\u8bbe\u8ba1","text":"<p>\u7531\u4e8eZynq\u4e2d\u5b58\u5728\u591a\u4e2a\u72ec\u7acb\u5185\u6838\uff0c \u53ef\u4ee5\u8ba9\u5185\u6838\u8fd0\u884c\u4e0d\u540c\u7684\u7cfb\u7edf\u3002 \u7136\u800cXilinx\u5df2\u7ecf\u7ec8\u6b62\u4e86Zynq7000\u7cfb\u5217\u7684OpenAMP\u652f\u6301\u3002 \u4e0d\u8fc7\u5bf9\u7b80\u5355\u7684\u5f02\u6784\u8bbe\u8ba1\u6765\u8bf4\uff0c \u53ef\u4ee5\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u548c\u4e2d\u65ad\u5b9e\u73b0\u3002</p> <p>\u53c2\u8003</p> <ul> <li>UG1144 Building multiconfig Applications</li> <li>UG585 Zynq 7000 Soc TRM - On Chip Memory OCM</li> <li>XAPP1078 Simple AMP Running Linux and Bare-Metal System on Both Zynq Processors Application Note</li> </ul>"},{"location":"xilinx/Petalinux/#remoteproc","title":"RemoteProc","text":""},{"location":"xilinx/Petalinux/#_9","title":"\u53c2\u8003\u8d44\u6599","text":"<p>UG1144</p> <p>ZYNQ\u4ee5\u540e\u80fd\u7528\u5230\u7684\u76f8\u5173\u5185\u5bb9</p>"},{"location":"xilinx/VitisUnifiedIDE/","title":"Vitis Unified IDE","text":"<p>Xilinx \u5728 2023.2 \u7248\u672c\u5bf9 Vitis \u8fdb\u884c\u4e86\u91cd\u5927\u5347\u7ea7\u3002 \u65b0\u7248\u7684 Vitis Unified IDE \u4e0e\u4e4b\u524d\u7684 Vitis Classic IDE \u53ca SDK \u5dee\u5f02\u663e\u8457\u3002 \u5c3d\u7ba1\u76f8\u5173\u6587\u6863\u4e0d\u5c11\uff0c\u4f46\u65b0\u7248\u8d44\u6599\u5e38\u4e0e\u8fc7\u65f6\u5185\u5bb9\u6df7\u6742\uff0c\u4e0d\u6613\u67e5\u627e\u3002</p> <p>\u672c\u6587\u6574\u7406\u4e86\u65b0\u7248 Vitis (2024.2) \u7684\u76f8\u5173\u8d44\u6599\uff0c\u5e76\u4ecb\u7ecd\u5176\u57fa\u7840\u4f7f\u7528\u6d41\u7a0b\u3002</p>"},{"location":"xilinx/VitisUnifiedIDE/#_1","title":"\u5f00\u53d1\u6d41\u7a0b","text":"<p>\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u5b98\u65b9\u6559\u7a0b\uff1a</p> <ul> <li>Using the Zynq SoC Processing System</li> <li>Getting Started in Vitis Unified Embedded IDE</li> </ul>"},{"location":"xilinx/VitisUnifiedIDE/#_2","title":"\u786c\u4ef6\u5e73\u53f0\u7684\u521b\u5efa","text":"<p>Vivado\u7aef\u7684\u914d\u7f6e\u8fc7\u7a0b\u4ecd\u7136\u548c\u4e4b\u524d\u57fa\u672c\u76f8\u540c\u3002</p> <p>\u65b0\u7248\u5f15\u5165<code>Extensible Vitis Platform</code>\u6982\u5ff5\uff0c \u652f\u6301\u5728\u5bfc\u51fa .xsa \u6587\u4ef6\u65f6\u53ea\u5305\u542b\u9884\u5408\u6210\u4fe1\u606f\uff0c \u540e\u7eed\u7531 Vitis \u8c03\u7528 Vivado \u5b8c\u6210\u7efc\u5408\u548c\u5e03\u7ebf\u3002 \u4e0d\u8fc7\u8fd9\u4e3b\u8981\u9762\u5411\u786c\u4ef6\u52a0\u901f\u573a\u666f\uff0c\u5bf9\u7eaf\u5d4c\u5165\u5f0f\u5f00\u53d1\u7528\u9014\u6709\u9650\u3002 \u6240\u4ee5\u5bf9\u4e8e\u7eaf\u5d4c\u5165\u5f0f\u5f00\u53d1\u4ecd\u7136\u53ef\u4ee5\u9009\u62e9\u5bfc\u51fa\u5305\u542bbitstream\u7684xsa\u6587\u4ef6\u3002</p> <p>\u65b0\u7248Vitis\u4f7f\u7528\u7cfb\u7edf\u8bbe\u5907\u6811(SDT)\u7ba1\u7406\u5404\u79cd\u5916\u8bbe\u548c\u9a71\u52a8\uff0c \u7c7b\u4f3c\u4e8eLinux\u4e2d\u7684\u8bbe\u5907\u6811\u7684\u6982\u5ff5\uff0c \u5728\u521b\u5efaplatform\u65f6\uff0c Vitis\u4f1a\u81ea\u52a8\u751f\u6210SDT\u5e76\u5bfc\u5165\u76f8\u5173\u7684\u9a71\u52a8\u3002 \u53c2\u8003\uff1a</p> <ul> <li>UG1647\u3002</li> <li>System Device Tree Generator</li> </ul>"},{"location":"xilinx/VitisUnifiedIDE/#_3","title":"\u8f6f\u4ef6\u5f00\u53d1","text":"<p>\u5728\u5de6\u8fb9\u680f\u7684Examples\u4e2d\u6709\u5f88\u591a\u6837\u4f8b\u6a21\u677f\uff0c \u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u7f16\u5199\u7a0b\u5e8f\u3002</p>"},{"location":"xilinx/VitisUnifiedIDE/#vs-code","title":"\u7ed3\u5408Vs Code\u5f00\u53d1","text":"<p>\u867d\u7136\u65b0\u7248Vitis\u5bf9UI\u8fdb\u884c\u4e86\u5927\u6539\uff0c \u4f46\u7f16\u7801\u4f53\u9a8c\u4ecd\u6709\u4e0d\u8db3, \u6bd4\u5982linter\u6709\u65f6\u4f1a\u5d29\u6e83\u3002 \u4e0d\u8fc7\u597d\u6d88\u606f\u662f\u65b0\u7248Vitis\u4f7f\u7528clangd\u4f5c\u4e3alint\u5de5\u5177\uff0c \u5728\u8f6f\u4ef6\u5e73\u53f0\u76ee\u5f55\u4e0b\u53ef\u4ee5\u770b\u5230<code>compile_commands.json</code>\u6587\u4ef6\uff0c \u6240\u4ee5\u5728Vs Code\u6216\u8005\u5176\u4ed6\u7f16\u8f91\u5668\u4e2d\u914d\u7f6e\u597dclangd\u5de5\u5177\u540e\uff0c \u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4ee3\u7801\u7684\u7f16\u5199\u3002</p> <p>\u5b98\u65b9Wiki\u4e2d\u63d0\u4f9b\u4e86\u65e7\u7248Vitis\u548cVs Code\u7ed3\u5408\u4f7f\u7528\u7684\u6559\u7a0b\uff1a Vitis Debug &amp; Development with VS Code</p>"},{"location":"xilinx/VitisUnifiedIDE/#_4","title":"\u786c\u4ef6\u5e73\u53f0\u7684\u66f4\u65b0","text":"<p>\u5982\u679c\u4fee\u6539\u4e86\u8bbe\u8ba1\uff0c \u9700\u8981\u91cd\u65b0\u751f\u6210xsa\u6587\u4ef6\uff0c \u5e76\u5728platform\u8bbe\u7f6e\u4e2d\u6d4f\u89c8\u5e76\u9009\u62e9\u65b0\u7684xsa\u6587\u4ef6\uff0c \u4e0d\u8fc7\u5982\u679c\u6539\u52a8\u592a\u5927\u7684\u8bdd\u8fd8\u662f\u5efa\u8bae\u91cd\u65b0\u521b\u5efaplatform\u3002</p> Warning <p>\u8c03\u8bd5\u4e2d\u52a0\u8f7d\u7684bitstream\u5728Application\u7684\u8c03\u8bd5\u914d\u7f6e\u76ee\u5f55<code>_ide/bitstream</code>\u4e0b\uff0c \u5728\u66f4\u6539xsa\u6587\u4ef6\u540e\uff0c \u8fd9\u4e2abitstream\u4e0d\u4f1a\u81ea\u52a8\u66f4\u65b0\uff01</p> <p>\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u7684\u5e94\u7528\u65b0bitstream\u7684\u65b9\u6cd5\uff1a \u5728\u8c03\u8bd5\u914d\u7f6e\u754c\u9762\u4e2d\u624b\u52a8\u5220\u9664\u539f\u8c03\u8bd5\u914d\u7f6e\uff0c \u518d\u91cd\u65b0\u751f\u6210\u8c03\u8bd5\u914d\u7f6e\u3002</p>"},{"location":"xilinx/VitisUnifiedIDE/#_5","title":"\u88f8\u673a\u5916\u8bbe\u9a71\u52a8\u7684\u4f7f\u7528","text":"<p>\u5b98\u65b9\u9a71\u52a8Wiki\uff1a Baremetal Drivers and Libraries</p> <p>\u6e90\u4ee3\u7801\uff1a embeddedsw</p> <p>\u53ef\u4ee5\u770b\u5230\u65b0\u7248\u7684\u9a71\u52a8\u4ee3\u7801\u52a0\u5165\u4e86<code>SDT</code>\u5b8f\u5b9a\u4e49\uff0c \u8fd9\u4e3b\u8981\u662f\u4e3a\u4e86\u517c\u5bb9\u8001\u7684\u4ee3\u7801\uff0c \u5f00\u53d1\u65b0\u5185\u5bb9\u65f6\u5efa\u8bae\u52a0\u4e0a\u8fd9\u4e2a\u5b8f\u5b9a\u4e49\u3002</p> <p>\u65b0\u7248\u9a71\u52a8\u7684\u521d\u59cb\u5316\u53c2\u6570\u7531ID\u53d8\u4e3a\u4e86\u57fa\u5730\u5740\uff0c \u76f8\u5e94\u7684<code>xparameters.h</code>\u6587\u4ef6\u7684\u53d8\u5316\u4e5f\u5f88\u5927\uff0c \u7279\u522b\u662f\u4e2d\u65ad\u7684\u914d\u7f6e\uff0c \u5728\u79fb\u690d\u65e7\u7248\u4ee3\u7801\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u3002</p>"},{"location":"xilinx/VitisUnifiedIDE/#_6","title":"\u4e2d\u65ad\u7684\u914d\u7f6e","text":"<p>\u65b0\u7248Vitis\u4f7f\u7528<code>interrupt_wrap</code>\u5e93\u66ff\u4ee3\u4e86\u539f\u7248\u7684\u4e2d\u65ad\u914d\u7f6e\uff0c \u4e2d\u65ad\u7684\u914d\u7f6e\u53d8\u5f97\u66f4\u7b80\u5355\u4e86\u3002 \u53ef\u4ee5\u53c2\u8003Interrupts made easy in the Vitis Unified IDE\u3002 \u9a71\u52a8\u7684\u6837\u4f8b\u4ee3\u7801\u4e2d\u4e5f\u57fa\u672c\u90fd\u52a0\u5165\u4e86\u65b0\u7684\u914d\u7f6e\u65b9\u6cd5\u3002</p> Warning <p>\u7531\u4e8e\u91c7\u7528\u4e86\u5b8c\u5168\u4e0d\u540c\u7684\u914d\u7f6e\u65b9\u5f0f\uff0c \u65b0\u7248Vitis\u751f\u6210\u7684 <code>xparameters.h</code> \u6587\u4ef6\u4e2d\u5df2\u7ecf\u4e0d\u518d\u5e26\u6709\u539f\u5148\u7684\u4ee5 <code>XPAR_FABRIC_</code> \u5f00\u5934\u7684\u4e2d\u65ad\u53f7\uff0c \u4e0d\u5efa\u8bae\u518d\u4f7f\u7528\u65e7\u7684\u4e2d\u65ad\u914d\u7f6e\u65b9\u5f0f\uff0c \u5f88\u53ef\u80fd\u4ea7\u751f\u95ee\u9898\u3002</p>"},{"location":"xilinx/VitisUnifiedIDE/#_7","title":"\u81ea\u5b9a\u4e49\u5916\u8bbe\u9a71\u52a8","text":"<p>\u4f7f\u7528AXI\u63a5\u53e3\u548cPS\u76f8\u8fde\u7684\u6a21\u5757\u53ef\u4ee5\u770b\u4f5c\u662f\u7528\u6237\u521b\u5efa\u7684\u5916\u8bbe\uff0c \u4e3a\u4e86\u5f00\u53d1\u76f8\u5e94\u7684\u9a71\u52a8\uff0c \u9700\u8981\u7f16\u5199\u5bf9\u5e94\u7684YAML/CMAKE\u6587\u4ef6\u3002</p> <p>Creating an SDT enabled baremetal driver template for Vitis Unified IDE \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5feb\u901f\u751f\u6210\u5916\u8bbe\u9a71\u52a8\u6a21\u677f\u7684tcl\u811a\u672c\uff0c \u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u5f00\u53d1\u81ea\u5b9a\u4e49\u9a71\u52a8\u3002</p> <p>\u518dTcl Console\u4e2d\u6267\u884c</p> <pre><code>source create_driver.tcl\n</code></pre> <p>\u901a\u8fc7help\u53ef\u4ee5\u67e5\u770b\u4f7f\u7528\u65b9\u6cd5</p> <pre><code>help -create_driver\n</code></pre> Tips <p>\u6ce8\u610f\u5230\u751f\u6210\u7684\u9a71\u52a8\u540d\u79f0\u662f\u548cip\u6838\u540d\u5b57\u76f8\u5173\u7684\uff0c \u811a\u672c\u4ec5\u4ec5\u662f\u5c06\u9996\u5b57\u6bcd\u5927\u5199\u5e76\u52a0\u5165\u4e86X\u7684\u524d\u7f00\uff0c \u5982\u679c\u5916\u8bbe\u662fBlock Design\u5e76\u4f7f\u7528\u81ea\u52a8\u751f\u6210\u7684wrapper\u7684\u8bdd\uff0c \u540d\u5b57\u4e2d\u5c31\u4f1a\u5e26\u6709<code>_wrapper</code>\u7684\u540e\u7f00\uff0c \u6bd4\u8f83\u4e11\u3002 \u4e0d\u8fc7\u53ef\u4ee5\u5c06Block Design\u5bfc\u51fa\u4e3aip\u6838\u91cd\u65b0\u547d\u540d\uff0c \u6216\u8005\u4e5f\u53ef\u4ee5\u8bd5\u7740\u4fee\u6539\u811a\u672c\u3002</p> <p>\u53ef\u4ee5\u770b\u5230\u751f\u6210\u7684\u9a71\u52a8\u6709<code>data</code>\uff0c<code>examples</code>\uff0c<code>src</code>\u4e09\u4e2a\u6587\u4ef6\u5939\uff0c \u548c\u5b98\u65b9\u7684\u9a71\u52a8\u7c7b\u4f3c\uff0c <code>src</code>\u6587\u4ef6\u5939\u4e0b\u6709CMake\u7684\u914d\u7f6e\u6587\u4ef6\u8fd8\u6709\u6e90\u4ee3\u7801\uff0c \u5176\u4e2d<code>_g.c</code>\u6587\u4ef6\u4f1a\u5728\u521b\u5efa\u8bbe\u5907\u6811\u65f6\u81ea\u52a8\u8bbe\u7f6e\uff0c \u4e0d\u9700\u8981\u7ba1\u3002 <code>data</code>\u6587\u4ef6\u5939\u4e0b\u5305\u542b\u6709<code>yaml</code>\u914d\u7f6e\u6587\u4ef6\uff0c Vitis\u901a\u8fc7\u8fd9\u4e2a\u6587\u4ef6\u8bc6\u522b\u5916\u8bbe\u5bf9\u5e94\u7684\u9a71\u52a8\u3002 \u914d\u7f6e\u6587\u4ef6\u90fd\u5df2\u7ecf\u81ea\u52a8\u751f\u6210\u5b8c\u6bd5\u4e86\uff0c \u4e00\u822c\u6765\u8bf4\u53ea\u9700\u8981\u4fee\u6539\u6e90\u4ee3\u7801\u5c31\u53ef\u4ee5\u3002</p> <p>\u9a71\u52a8\u7f16\u5199\u5b8c\u6210\u540e\uff0c \u53ef\u4ee5\u5728\u83dc\u5355\u680f\u7684<code>Vitis/Embedded SW Repositories</code>\u4e2d\u6dfb\u52a0\u9a71\u52a8\u7684\u76ee\u5f55\u3002 \u811a\u672c\u751f\u6210\u7684\u76ee\u5f55\u662f<code>repo/XilinxProcessorIPLib/drivers/...</code>\u7684\u7ed3\u6784\uff0c \u6dfb\u52a0<code>repo</code>\u7684\u8def\u5f84\u5373\u53ef\u3002</p> Warning <p>Vitis\u4f3c\u4e4e\u53ea\u4f1a\u5728\u521b\u5efaplatform\u65f6\u624d\u4f1a\u67e5\u627e\u9a71\u52a8\uff0c \u5efa\u8bae\u63d0\u524d\u51c6\u5907\u597d\u9a71\u52a8\u6587\u4ef6\uff0c \u4ee5\u514d\u9700\u8981\u91cd\u65b0\u521b\u5efaplatform\u3002</p> <p>\u6b64\u5916Vitis\u4f1a\u5c06\u6240\u6709\u9a71\u52a8\u7684\u6e90\u4ee3\u7801\u590d\u5236\u5230\u5de5\u7a0b\u6587\u4ef6\u5939\u4e0b\uff0c \u5728\u5e93\u4e2d\u8fdb\u884c\u7684\u4fee\u6539\u5e76\u4e0d\u4f1a\u81ea\u52a8\u540c\u6b65\uff0c \u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u91cd\u65b0\u751f\u6210BSP\u5bfc\u5165\u3002</p> <p>\u5982\u679c\u4fee\u6539\u4e86\u9a71\u52a8\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u3002</p>"},{"location":"xilinx/VitisUnifiedIDE/#_8","title":"\u53c2\u8003\u8d44\u6599","text":"<p>Xilinx Wiki</p> <p>Vitis-Tutorials</p> <p>Embedded-Design-Tutorials</p> <p>Vitis_Embedded_Platform_Source</p>"}]}